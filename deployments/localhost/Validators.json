{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimFeeReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pendingReward",
          "type": "uint256"
        }
      ],
      "name": "ClaimReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositMargin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_feeShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_reused",
          "type": "bool"
        }
      ],
      "name": "NewValidatorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_blocknum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "PunishValidator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "ReceiveKCS",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RedeemMargin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockingEndTime",
          "type": "uint256"
        }
      ],
      "name": "Revoke",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "SetFeeSetLockingDuration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_feeShares",
          "type": "uint256"
        }
      ],
      "name": "SetFeeShares",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "SetMarginLockingDuration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "SetMaxPunishmentBallots",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        }
      ],
      "name": "SetMinSelfBallots",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SetPoolStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "SetRevokeLockingDuration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pendingReward",
          "type": "uint256"
        }
      ],
      "name": "ValidatorClaimReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Vote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EPOCH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_TOTAL_SHARES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FEE_SHARES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_VALIDATORS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROPOSAL_CONTRACT",
      "outputs": [
        {
          "internalType": "contract IProposal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLISH_CONTRACT",
      "outputs": [
        {
          "internalType": "contract IPunish",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESERVEPOOL_CONTRACT",
      "outputs": [
        {
          "internalType": "contract IReservePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_CONTRACT",
      "outputs": [
        {
          "internalType": "contract IValidators",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTE_UNIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeValidators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_proposalID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_feeShares",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "website",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        }
      ],
      "name": "addValidator",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "candidateInfos",
      "outputs": [
        {
          "internalType": "string",
          "name": "website",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "details",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_val",
          "type": "address"
        }
      ],
      "name": "claimFeeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_val",
          "type": "address"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_val",
          "type": "address"
        }
      ],
      "name": "claimSelfBallotsReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_val",
          "type": "address"
        }
      ],
      "name": "depositMargin",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeBlockReward",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeSetLockingDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveValidators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "val",
          "type": "address"
        }
      ],
      "name": "getPoolManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "val",
          "type": "address"
        }
      ],
      "name": "getPoolSelfBallots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "val",
          "type": "address"
        }
      ],
      "name": "getPoolSelfBallotsRewardsDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "val",
          "type": "address"
        }
      ],
      "name": "getPoolaccRewardPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "val",
          "type": "address"
        }
      ],
      "name": "getPoolelectedNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "val",
          "type": "address"
        }
      ],
      "name": "getPoolenabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "val",
          "type": "address"
        }
      ],
      "name": "getPoolfeeDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "val",
          "type": "address"
        }
      ],
      "name": "getPoolfeeSettLockingEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "val",
          "type": "address"
        }
      ],
      "name": "getPoolfeeShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "val",
          "type": "address"
        }
      ],
      "name": "getPoollastRewardBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "val",
          "type": "address"
        }
      ],
      "name": "getPoolpendingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "val",
          "type": "address"
        }
      ],
      "name": "getPoolsuppliedBallot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "val",
          "type": "address"
        }
      ],
      "name": "getPoolvoterNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTopValidators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserVotingSummary",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "validator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "validatorBallot",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeShares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ballot",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pendingReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "revokingBallot",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "revokeLockingEndTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct IValidators.VotingData[]",
          "name": "votingDataList",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "getValidatorsOfManager",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_validators",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_managers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_feeShares",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_validatorsContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_punishContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_proposalContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reservePool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "val",
          "type": "address"
        }
      ],
      "name": "isActiveValidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        }
      ],
      "name": "isPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_val",
          "type": "address"
        }
      ],
      "name": "isWithdrawable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marginLockingDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPunishmentAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minSelfBallots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum IValidators.Operation",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "operationsDone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_val",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "remove",
          "type": "bool"
        }
      ],
      "name": "punish",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_val",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeemMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokeLockingDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_val",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "revokeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "revokingInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockingEndTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockingDuration",
          "type": "uint256"
        }
      ],
      "name": "setFeeSetLockingDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_val",
          "type": "address"
        }
      ],
      "name": "setFeeSharesOfValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockingDuration",
          "type": "uint256"
        }
      ],
      "name": "setMarginLockingDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "setMaxPunishmentAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_min",
          "type": "uint256"
        }
      ],
      "name": "setMinSelfBallots",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_val",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "setPoolStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockingDuration",
          "type": "uint256"
        }
      ],
      "name": "setRevokeLockingDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBallot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "newSet",
          "type": "address[]"
        }
      ],
      "name": "updateActiveValidatorSet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "details",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "website",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        }
      ],
      "name": "updateCandidateInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "usedProposals",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_val",
          "type": "address"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_val",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_val",
          "type": "address"
        }
      ],
      "name": "withdrawMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4f86ba953e98432c00b53a5a571cb4599913d369bd79f1db359ce2c4b4b79b9f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "5361215",
    "logsBloom": "0x
    "blockHash": "0x3c02ad321b65c8995f49f34322e3d8f6624ff00fa4125248a245dfb8c17c2cb5",
    "transactionHash": "0x4f86ba953e98432c00b53a5a571cb4599913d369bd79f1db359ce2c4b4b79b9f",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "5361215",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3663257ad93ed4c1b3eace3c7da3f631",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimFeeReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositMargin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_reused\",\"type\":\"bool\"}],\"name\":\"NewValidatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_blocknum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PunishValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ReceiveKCS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedeemMargin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockingEndTime\",\"type\":\"uint256\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"SetFeeSetLockingDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeShares\",\"type\":\"uint256\"}],\"name\":\"SetFeeShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"SetMarginLockingDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"SetMaxPunishmentBallots\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"SetMinSelfBallots\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetPoolStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"SetRevokeLockingDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"}],\"name\":\"ValidatorClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EPOCH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_TOTAL_SHARES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE_SHARES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VALIDATORS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROPOSAL_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IProposal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLISH_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IPunish\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESERVEPOOL_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IReservePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IValidators\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTE_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeValidators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_proposalID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_feeShares\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"}],\"name\":\"addValidator\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"candidateInfos\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"claimFeeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"claimSelfBallotsReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeBlockReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSetLockingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"getPoolManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"getPoolSelfBallots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"getPoolSelfBallotsRewardsDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"getPoolaccRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"getPoolelectedNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"getPoolenabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"getPoolfeeDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"getPoolfeeSettLockingEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"getPoolfeeShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"getPoollastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"getPoolpendingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"getPoolsuppliedBallot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"getPoolvoterNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTopValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserVotingSummary\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validatorBallot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ballot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revokingBallot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revokeLockingEndTime\",\"type\":\"uint256\"}],\"internalType\":\"struct IValidators.VotingData[]\",\"name\":\"votingDataList\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"getValidatorsOfManager\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_managers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_feeShares\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validatorsContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_punishContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proposalContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reservePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"isActiveValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"isWithdrawable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marginLockingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPunishmentAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSelfBallots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum IValidators.Operation\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"operationsDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"remove\",\"type\":\"bool\"}],\"name\":\"punish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeLockingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"revokeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"revokingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockingEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockingDuration\",\"type\":\"uint256\"}],\"name\":\"setFeeSetLockingDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"setFeeSharesOfValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockingDuration\",\"type\":\"uint256\"}],\"name\":\"setMarginLockingDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMaxPunishmentAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"setMinSelfBallots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setPoolStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockingDuration\",\"type\":\"uint256\"}],\"name\":\"setRevokeLockingDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBallot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newSet\",\"type\":\"address[]\"}],\"name\":\"updateActiveValidatorSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"}],\"name\":\"updateCandidateInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedProposals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Validators.sol\":\"Validators\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"contracts/Admin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\r\\n\\r\\ncontract Admin is Initializable {\\r\\n    address public admin;\\r\\n\\r\\n    // solhint-disable func-name-mixedcase\\r\\n    function _Admin_Init(address _admin) internal initializer {\\r\\n        admin = _admin;\\r\\n    }\\r\\n\\r\\n    function _onlyAdmin() private view {\\r\\n        require(msg.sender == admin, \\\"must be admin\\\");\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        _onlyAdmin();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function changeAdmin(address _admin) public onlyAdmin {\\r\\n        admin = _admin;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7bad7fa804122c3a58d53db49371851ce060a42a88b8e0134ffbe8dc9c3832e7\",\"license\":\"MIT\"},\"contracts/Validators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n// import \\\"./Params.sol\\\";\\r\\nimport \\\"./interfaces/IValidators.sol\\\";\\r\\nimport \\\"./interfaces/IPunish.sol\\\";\\r\\nimport \\\"./interfaces/IProposal.sol\\\";\\r\\nimport \\\"./interfaces/IReservePool.sol\\\";\\r\\nimport \\\"./library/SortedList.sol\\\";\\r\\nimport \\\"./library/SafeSend.sol\\\";\\r\\nimport \\\"./interfaces/IReservePool.sol\\\";\\r\\nimport \\\"./Admin.sol\\\";\\r\\n\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        uint256 c = a + b;\\r\\n        if (c < a) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b > a) return (false, 0);\\r\\n        return (true, a - b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) return (true, 0);\\r\\n        uint256 c = a * b;\\r\\n        if (c / a != b) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a / b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a % b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) return 0;\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow, so we distribute\\r\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nlibrary EnumerableSet {\\r\\n  \\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping (bytes32 => uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\r\\n            \\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\r\\n\\r\\n            bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n            // Move the last value to the index where the value to delete is\\r\\n            set._values[toDeleteIndex] = lastvalue;\\r\\n            // Update the index for the moved value\\r\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n  \\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n}\\r\\n\\r\\n \\r\\nlibrary Address {\\r\\n   \\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n   \\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\r\\n    bool private _notEntered;\\r\\n\\r\\n\\r\\n    function __ReentrancyGuard_init() internal initializer {\\r\\n        __ReentrancyGuard_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\r\\n\\r\\n\\r\\n        \\r\\n        _notEntered = true;\\r\\n\\r\\n    }\\r\\n\\r\\n    function _nonReentrant() private view {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n    }\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        _nonReentrant();\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _notEntered = false;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\ncontract Params is Initializable {\\r\\n\\r\\n    // System contracts addresses \\r\\n    IValidators public  VALIDATOR_CONTRACT; // solhint-disable var-name-mixedcase\\r\\n    IPunish public  PUBLISH_CONTRACT;       // solhint-disable var-name-mixedcase\\r\\n    IProposal public  PROPOSAL_CONTRACT;    // solhint-disable var-name-mixedcase\\r\\n    IReservePool public RESERVEPOOL_CONTRACT; // solhint-disable var-name-mixedcase\\r\\n    uint256 public EPOCH; // solhint-disable var-name-mixedcase\\r\\n\\r\\n    // System params\\r\\n    uint16 public constant MAX_VALIDATORS = 29;\\r\\n\\r\\n    function _onlyMiner() private view {\\r\\n        require(msg.sender == block.coinbase, \\\"Miner only\\\");\\r\\n    }\\r\\n    \\r\\n\\r\\n    modifier onlyMiner() {\\r\\n        _onlyMiner();\\r\\n        _;\\r\\n    }\\r\\n    function _onlyPunishContract() private view {\\r\\n        require(msg.sender == address(PUBLISH_CONTRACT), \\\"Punish contract only\\\");\\r\\n    }\\r\\n\\r\\n    modifier onlyPunishContract() {\\r\\n        _onlyPunishContract();\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n\\r\\n    modifier onlyBlockEpoch {\\r\\n        require(block.number % EPOCH == 0, \\\"Block epoch only\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyValidatorsContract() {\\r\\n        require(msg.sender == address(VALIDATOR_CONTRACT), \\\"Validators contract only\\\");\\r\\n        _;\\r\\n\\r\\n    }\\r\\n\\r\\n    function _setAddressesAndEpoch(\\r\\n            address _validatorsContract,\\r\\n            address _punishContract,\\r\\n            address _proposalContract,\\r\\n            address _reservePool,\\r\\n            uint256 epoch\\r\\n    ) internal initializer{\\r\\n        VALIDATOR_CONTRACT = IValidators(payable(_validatorsContract));\\r\\n        PUBLISH_CONTRACT = IPunish(payable(_punishContract));\\r\\n        PROPOSAL_CONTRACT = IProposal(payable(_proposalContract));\\r\\n        RESERVEPOOL_CONTRACT = IReservePool(payable(_reservePool));\\r\\n        EPOCH = epoch;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ncontract Validators is\\r\\n    Params,\\r\\n    Admin,\\r\\n    ReentrancyGuardUpgradeSafe,\\r\\n    IValidators,\\r\\n    SafeSend\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    //using SafeERC20 for IERC20;\\r\\n    using Address for address;\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n    using SortedLinkedList for SortedLinkedList.List;\\r\\n    // apply to calculate fee distribution.\\r\\n    uint256 public constant FEE_TOTAL_SHARES = 10000;\\r\\n    uint256 public constant MAX_FEE_SHARES = 3000;\\r\\n    uint256 public constant VOTE_UNIT = 1e18;\\r\\n\\r\\n    event SetMinSelfBallots(uint256 min);\\r\\n    event SetMaxPunishmentBallots(uint256 max);\\r\\n    event SetRevokeLockingDuration(uint256 duration);\\r\\n    event SetFeeSetLockingDuration(uint256 duration);\\r\\n    event SetMarginLockingDuration(uint256 duration);\\r\\n\\r\\n    event NewValidatorAdded(\\r\\n        address indexed _validator,\\r\\n        address indexed _manager,\\r\\n        uint256 _feeShares,\\r\\n        bool _reused\\r\\n    );\\r\\n\\r\\n    event PunishValidator(\\r\\n        address indexed _validator,\\r\\n        uint256 indexed _blocknum,\\r\\n        uint256 _amount\\r\\n    );\\r\\n    event SetPoolStatus(address indexed validator, bool enabled);\\r\\n    event SetFeeShares(address indexed _validator, uint256 _feeShares);\\r\\n    event Vote(address indexed user, address indexed validator, uint256 amount);\\r\\n    event Revoke(\\r\\n        address indexed user,\\r\\n        address indexed validator,\\r\\n        uint256 amount,\\r\\n        uint256 lockingEndTime\\r\\n    );\\r\\n    event Withdraw(\\r\\n        address indexed user,\\r\\n        address indexed validator,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event ClaimReward(\\r\\n        address indexed user,\\r\\n        address indexed validator,\\r\\n        uint256 pendingReward\\r\\n    );\\r\\n    event ClaimFeeReward(address indexed validator, uint256 amount);\\r\\n    event RewardTransfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event DepositMargin(\\r\\n        address indexed from,\\r\\n        address indexed validator,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event RedeemMargin(\\r\\n        address indexed from,\\r\\n        address indexed validator,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event ValidatorClaimReward(\\r\\n        address indexed validator,\\r\\n        uint256 pendingReward\\r\\n    );\\r\\n    event ReceiveKCS(address from, uint256 _amount);\\r\\n    // Total Ballots\\r\\n    uint256 public totalBallot;\\r\\n\\r\\n    // The duration to wait after revoking ballots and before withdrawing.\\r\\n    uint256 public revokeLockingDuration;\\r\\n\\r\\n    // The duration to wait after the last change of fee.\\r\\n    uint256 public feeSetLockingDuration;\\r\\n\\r\\n    // The duration to wait after revoking margins and before withdrawing.\\r\\n    uint256 public marginLockingDuration;\\r\\n\\r\\n    uint256 public maxPunishmentAmount;\\r\\n\\r\\n    // The minimum margin in ballots that a validator needs to deposit.\\r\\n    uint256 public minSelfBallots;\\r\\n\\r\\n    // The _sortedEnabledValidators contains all the enabled\\r\\n    // validators that are in descending order.\\r\\n    SortedLinkedList.List private _sortedEnabledValidators;\\r\\n\\r\\n    uint256 public rewardsLeft;\\r\\n\\r\\n    mapping(uint256 => mapping(Operation => bool)) public operationsDone;\\r\\n\\r\\n    mapping(address => PoolInfo) internal poolInfos;\\r\\n    mapping(address => Description) public candidateInfos;\\r\\n\\r\\n    mapping(bytes32 => bool) public usedProposals;\\r\\n\\r\\n    // Info of each user that votes.\\r\\n    mapping(address => mapping(address => UserInfo)) public userInfo;\\r\\n\\r\\n    // Info on each user's revoking ballots\\r\\n    mapping(address => mapping(address => RevokingInfo)) public revokingInfo;\\r\\n\\r\\n    // Mapping from the voter's address to\\r\\n    // the validators that the voter voted.\\r\\n    mapping(address => EnumerableSet.AddressSet) private _votingRecordIndexInfo;\\r\\n\\r\\n    // Mapping from the manager's address to\\r\\n    // the validators that the manager controls.\\r\\n    mapping(address => EnumerableSet.AddressSet) private managedValidatorInfo;\\r\\n\\r\\n    // The active validators in this epoch\\r\\n    address[] public activeValidators;\\r\\n\\r\\n    function initialize(\\r\\n        address[] calldata _validators,\\r\\n        address[] calldata _managers,\\r\\n        uint256[] calldata _feeShares,\\r\\n        address _admin,\\r\\n        address _validatorsContract,\\r\\n        address _punishContract,\\r\\n        address _proposalContract,\\r\\n        address _reservePool,\\r\\n        uint256 _epoch\\r\\n    ) external initializer {\\r\\n        require(\\r\\n            _validators.length == _feeShares.length &&\\r\\n                _validators.length == _managers.length &&\\r\\n                _validators.length > 0,\\r\\n            \\\"invalid validator \\\"\\r\\n        );\\r\\n\\r\\n        revokeLockingDuration = 3 days;\\r\\n        marginLockingDuration = 15 days;\\r\\n        feeSetLockingDuration = 1 days;\\r\\n        maxPunishmentAmount = 100 ether;\\r\\n        minSelfBallots = 0;\\r\\n\\r\\n        require(\\r\\n            address(this).balance >=\\r\\n                minSelfBallots.mul(_validators.length).mul(VOTE_UNIT),\\r\\n            \\\"no enough kcs in validators contract\\\"\\r\\n        );\\r\\n\\r\\n        _Admin_Init(_admin);\\r\\n        _setAddressesAndEpoch(\\r\\n            _validatorsContract,\\r\\n            _punishContract,\\r\\n            _proposalContract,\\r\\n            _reservePool,\\r\\n            _epoch\\r\\n        );\\r\\n        __ReentrancyGuard_init();\\r\\n\\r\\n        for (uint256 i = 0; i < _validators.length; ++i) {\\r\\n            address val = _validators[i];\\r\\n            uint256 feeShares = _feeShares[i];\\r\\n            // update PoolInfo\\r\\n            PoolInfo storage pool = poolInfos[val];\\r\\n            pool.manager = _managers[i];\\r\\n            pool.validator = val;\\r\\n            pool.selfBallots = minSelfBallots;\\r\\n            pool.feeShares = feeShares;\\r\\n            pool.pendingFee = 0;\\r\\n            pool.feeDebt = 0;\\r\\n            pool.lastRewardBlock = block.number;\\r\\n            // solhint-disable not-rely-on-times\\r\\n            pool.feeSettLockingEndTime = block.timestamp.add(\\r\\n                feeSetLockingDuration\\r\\n            );\\r\\n            pool.suppliedBallots = minSelfBallots;\\r\\n            pool.accRewardPerShare = 0;\\r\\n            pool.voterNumber = 0;\\r\\n            pool.electedNumber = 0;\\r\\n            pool.enabled = true;\\r\\n\\r\\n            // Update Candidate Info\\r\\n            Description storage desc = candidateInfos[val];\\r\\n            desc.details = \\\"\\\";\\r\\n            desc.email = \\\"\\\";\\r\\n            desc.website = \\\"\\\";\\r\\n\\r\\n            _sortedEnabledValidators.improveRanking(poolInfos, val);\\r\\n            if (activeValidators.length < MAX_VALIDATORS) {\\r\\n                activeValidators.push(val);\\r\\n            }\\r\\n            totalBallot = totalBallot.add(pool.suppliedBallots);\\r\\n\\r\\n            emit NewValidatorAdded(val, _managers[i], feeShares, false);\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < _validators.length; ++i) {\\r\\n            // @audit PVE001\\r\\n            EnumerableSet.add(\\r\\n                managedValidatorInfo[_managers[i]],\\r\\n                _validators[i]\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setMinSelfBallots(uint256 _min) external onlyAdmin {\\r\\n        require(_min != minSelfBallots, \\\"Validators: No change detected.\\\");\\r\\n\\r\\n        minSelfBallots = _min;\\r\\n        emit SetMinSelfBallots(_min);\\r\\n    }\\r\\n\\r\\n    function setMaxPunishmentAmount(uint256 _max) external onlyAdmin {\\r\\n        require(_max != maxPunishmentAmount, \\\"Validators: No change detected.\\\");\\r\\n        maxPunishmentAmount = _max;\\r\\n\\r\\n        emit SetMaxPunishmentBallots(_max);\\r\\n    }\\r\\n\\r\\n    function setRevokeLockingDuration(uint256 _lockingDuration)\\r\\n        external\\r\\n        onlyAdmin\\r\\n    {\\r\\n        require(\\r\\n            _lockingDuration != revokeLockingDuration,\\r\\n            \\\"Validators: No change detected.\\\"\\r\\n        );\\r\\n\\r\\n        revokeLockingDuration = _lockingDuration;\\r\\n        emit SetRevokeLockingDuration(_lockingDuration);\\r\\n    }\\r\\n\\r\\n    function setFeeSetLockingDuration(uint256 _lockingDuration)\\r\\n        external\\r\\n        onlyAdmin\\r\\n    {\\r\\n        require(\\r\\n            _lockingDuration != feeSetLockingDuration,\\r\\n            \\\"Validators: No change detected.\\\"\\r\\n        );\\r\\n\\r\\n        feeSetLockingDuration = _lockingDuration;\\r\\n        emit SetFeeSetLockingDuration(_lockingDuration);\\r\\n    }\\r\\n\\r\\n    function setMarginLockingDuration(uint256 _lockingDuration)\\r\\n        external\\r\\n        onlyAdmin\\r\\n    {\\r\\n        require(\\r\\n            _lockingDuration != marginLockingDuration,\\r\\n            \\\"Validators: No change detected.\\\"\\r\\n        );\\r\\n\\r\\n        marginLockingDuration = _lockingDuration;\\r\\n\\r\\n        emit SetMarginLockingDuration(_lockingDuration);\\r\\n    }\\r\\n\\r\\n    function getValidatorsOfManager(address _manager)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory)\\r\\n    {\\r\\n        EnumerableSet.AddressSet storage validators = managedValidatorInfo[\\r\\n            _manager\\r\\n        ];\\r\\n\\r\\n        uint256 validatorsLength = EnumerableSet.length(validators);\\r\\n        address[] memory validatorList = new address[](validatorsLength);\\r\\n\\r\\n        uint256 index = 0;\\r\\n        for (uint256 i = 0; i < validatorsLength; i++) {\\r\\n            address val = address(EnumerableSet.at(validators, i));\\r\\n            validatorList[index] = val;\\r\\n            index = index.add(1);\\r\\n        }\\r\\n        return validatorList;\\r\\n    }\\r\\n\\r\\n    function addValidator(\\r\\n        address _validator,\\r\\n        address _manager,\\r\\n        bytes32 _proposalID,\\r\\n        uint256 _feeShares,\\r\\n        string memory description,\\r\\n        string memory website,\\r\\n        string memory email\\r\\n    ) public payable nonReentrant {\\r\\n        require(msg.value.mod(VOTE_UNIT) == 0, \\\"should be ether multiple.\\\");\\r\\n\\r\\n        require(!usedProposals[_proposalID], \\\"proposal cannot be reused\\\");\\r\\n        usedProposals[_proposalID] = true;\\r\\n\\r\\n        require(\\r\\n            PROPOSAL_CONTRACT.isProposalPassed(_validator, _proposalID),\\r\\n            \\\"proposal is not passed\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            msg.sender == admin || msg.sender == _validator,\\r\\n            \\\"cant add valdator\\\"\\r\\n        );\\r\\n\\r\\n        require(_validator != address(0), \\\"Validators: ZERO_ADDRESS.\\\");\\r\\n        require(\\r\\n            _feeShares <= MAX_FEE_SHARES,\\r\\n            \\\"Validators: the fee shares should be in the range(0..3000).\\\"\\r\\n        );\\r\\n        require(\\r\\n            poolInfos[_validator].enabled == false,\\r\\n            \\\"already have an enabled pool\\\"\\r\\n        );\\r\\n\\r\\n        // how many votes does the validator's margin contribute\\r\\n        // to the pool\\r\\n        uint256 votes = msg.value.div(VOTE_UNIT);\\r\\n\\r\\n        if (poolInfos[_validator].validator == _validator) {\\r\\n            // reuse a previous pool\\r\\n            PoolInfo storage pool = poolInfos[_validator];\\r\\n\\r\\n            if (pool.selfBallots >= minSelfBallots) {\\r\\n                _validatorClaimReward(_validator);\\r\\n            }\\r\\n\\r\\n            // @audit PVE001\\r\\n            EnumerableSet.add(managedValidatorInfo[_manager], _validator);\\r\\n\\r\\n            pool.selfBallots = pool.selfBallots.add(votes);\\r\\n            pool.selfBallotsRewardsDebt = pool\\r\\n                .accRewardPerShare\\r\\n                .mul(pool.selfBallots)\\r\\n                .div(1e12);\\r\\n            pool.suppliedBallots = pool.suppliedBallots.add(votes);\\r\\n            pool.enabled = true;\\r\\n            pool.manager = _manager;\\r\\n            candidateInfos[_validator].website = website;\\r\\n            candidateInfos[_validator].email = email;\\r\\n            candidateInfos[_validator].details = description;\\r\\n\\r\\n            emit NewValidatorAdded(_validator, _manager, _feeShares, true);\\r\\n        } else {\\r\\n            poolInfos[_validator] = PoolInfo({\\r\\n                validator: _validator,\\r\\n                manager: _manager,\\r\\n                selfBallots: votes,\\r\\n                selfBallotsRewardsDebt: 0,\\r\\n                feeShares: _feeShares,\\r\\n                lastRewardBlock: block.number,\\r\\n                feeSettLockingEndTime: block.timestamp.add(\\r\\n                    feeSetLockingDuration\\r\\n                ), // solhint-disable not-rely-on-time\\r\\n                pendingFee: 0,\\r\\n                feeDebt: 0,\\r\\n                suppliedBallots: votes,\\r\\n                accRewardPerShare: 0,\\r\\n                voterNumber: 0,\\r\\n                electedNumber: 0,\\r\\n                enabled: true\\r\\n            });\\r\\n            candidateInfos[_validator] = Description({\\r\\n                website: website,\\r\\n                email: email,\\r\\n                details: description\\r\\n            });\\r\\n\\r\\n            emit NewValidatorAdded(_validator, _manager, _feeShares, false);\\r\\n        }\\r\\n\\r\\n        if (poolInfos[_validator].selfBallots >= minSelfBallots) {\\r\\n            _sortedEnabledValidators.improveRanking(poolInfos, _validator);\\r\\n        }\\r\\n\\r\\n        totalBallot = totalBallot.add(votes);\\r\\n    }\\r\\n\\r\\n    // Enable/disable the target pool\\r\\n    // Only admin can call this function.\\r\\n    function setPoolStatus(address _val, bool _enabled) public onlyAdmin {\\r\\n        _setPoolStatus(_val, _enabled);\\r\\n    }\\r\\n\\r\\n    function setFeeSharesOfValidator(uint256 _shares, address _val) public {\\r\\n        PoolInfo storage pool = poolInfos[_val];\\r\\n        require(msg.sender == pool.manager, \\\"only manager can change it\\\");\\r\\n        require(pool.enabled, \\\"pool is not enabled\\\");\\r\\n        require(pool.validator != address(0), \\\"Pool does not exist\\\");\\r\\n        require(\\r\\n            _shares <= MAX_FEE_SHARES,\\r\\n            \\\"Validators: the fee shares should be in the range(0..3000).\\\"\\r\\n        );\\r\\n        require(\\r\\n            block.timestamp >= pool.feeSettLockingEndTime,\\r\\n            \\\"Validators: one time of change within 24 hours.\\\"\\r\\n        ); // solhint-disable not-rely-on-time\\r\\n\\r\\n        require(_shares != pool.feeShares, \\\"Validators: no change detected.\\\");\\r\\n\\r\\n        // total 10000(1e4) shares, how many shares validator itself occupies.\\r\\n        pool.feeShares = _shares;\\r\\n        //\\r\\n        pool.feeSettLockingEndTime = block.timestamp.add(feeSetLockingDuration); // solhint-disable not-rely-on-time\\r\\n\\r\\n        emit SetFeeShares(_val, _shares);\\r\\n    }\\r\\n\\r\\n    // Only the miner can call this function to distribute rewards to validators.\\r\\n    function distributeBlockReward()\\r\\n        external\\r\\n        payable\\r\\n        override\\r\\n        onlyMiner\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(\\r\\n            !operationsDone[block.number][Operation.Distributed],\\r\\n            \\\"cannot be called more than once in a single block\\\"\\r\\n        );\\r\\n\\r\\n        operationsDone[block.number][Operation.Distributed] = true;\\r\\n\\r\\n        uint256 rewardsFromReservePool = RESERVEPOOL_CONTRACT\\r\\n            .withdrawBlockReward();\\r\\n        if (rewardsFromReservePool == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 numOfValidatorRewarded = 0;\\r\\n        // total amount available for distribution:\\r\\n        //   rewardLeft + rewardsFromReservePool\\r\\n        uint256 totalAvailable = rewardsLeft.add(rewardsFromReservePool);\\r\\n        uint256 totalDistributed = 0; // actually distributed\\r\\n\\r\\n        if (activeValidators.length > 0) {\\r\\n            // The total ballots of all active validators\\r\\n            uint256 _totalBallot = 0;\\r\\n            for (uint8 i = 0; i < activeValidators.length; i++) {\\r\\n                PoolInfo storage pool = poolInfos[activeValidators[i]];\\r\\n\\r\\n                // Distribute block rewards only to validators that have enough ballots and are enabled\\r\\n                if (pool.selfBallots >= minSelfBallots && pool.enabled) {\\r\\n                    _totalBallot = _totalBallot.add(\\r\\n                        poolInfos[activeValidators[i]].suppliedBallots\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (_totalBallot > 0) {\\r\\n                // roundoff error -\\r\\n                uint256 rewardsPerShare = totalAvailable.div(_totalBallot);\\r\\n\\r\\n                for (uint8 i = 0; i < activeValidators.length; i++) {\\r\\n                    PoolInfo storage pool = poolInfos[activeValidators[i]];\\r\\n\\r\\n                    if (pool.selfBallots < minSelfBallots || !pool.enabled) {\\r\\n                        continue;\\r\\n                    }\\r\\n\\r\\n                    uint256 poolRewards = rewardsPerShare.mul(\\r\\n                        pool.suppliedBallots\\r\\n                    );\\r\\n\\r\\n                    // roundoff error -\\r\\n                    // validator's commission fee\\r\\n                    uint256 feeReward = poolRewards.mul(pool.feeShares).div(\\r\\n                        FEE_TOTAL_SHARES\\r\\n                    );\\r\\n\\r\\n                    pool.pendingFee = pool.pendingFee.add(feeReward);\\r\\n\\r\\n                    // reward to be distributed to staked users\\r\\n                    uint256 votingReward = poolRewards.sub(feeReward);\\r\\n\\r\\n                    {\\r\\n                        pool.accRewardPerShare = pool.accRewardPerShare.add(\\r\\n                            votingReward.mul(1e12).div(pool.suppliedBallots) // roundoff error -\\r\\n                        );\\r\\n                    }\\r\\n\\r\\n                    // roundoff error -\\r\\n                    totalDistributed = totalDistributed.add(poolRewards);\\r\\n                    pool.lastRewardBlock = block.number;\\r\\n                    pool.electedNumber = pool.electedNumber.add(1);\\r\\n                    numOfValidatorRewarded++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(\\r\\n            totalAvailable >= totalDistributed,\\r\\n            \\\"Validators: totalAvailable is less than totalDistributed\\\"\\r\\n        );\\r\\n\\r\\n        //\\r\\n        rewardsLeft = totalAvailable.sub(totalDistributed);\\r\\n    }\\r\\n\\r\\n    function updateActiveValidatorSet(address[] calldata newSet)\\r\\n        external\\r\\n        override\\r\\n        onlyMiner\\r\\n        onlyBlockEpoch\\r\\n    {\\r\\n        operationsDone[block.number][Operation.UpdatedValidators] = true;\\r\\n\\r\\n        require(\\r\\n            newSet.length > 0 && newSet.length <= MAX_VALIDATORS,\\r\\n            \\\"invalid length of newSet array\\\"\\r\\n        );\\r\\n\\r\\n        activeValidators = newSet; // FIXME: gas cost ?\\r\\n    }\\r\\n\\r\\n    function getTopValidators()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (address[] memory)\\r\\n    {\\r\\n        uint256 nValidators = Math.min(\\r\\n            MAX_VALIDATORS,\\r\\n            _sortedEnabledValidators.length\\r\\n        );\\r\\n\\r\\n        if (nValidators == 0) {\\r\\n            return new address[](0);\\r\\n        }\\r\\n\\r\\n        address[] memory topValidators = new address[](nValidators);\\r\\n\\r\\n        // The first element\\r\\n        address currVal = _sortedEnabledValidators.head;\\r\\n        topValidators[0] = currVal;\\r\\n\\r\\n        // All other elements\\r\\n        uint256 nextIndex = 1;\\r\\n        while (nextIndex < nValidators) {\\r\\n            currVal = _sortedEnabledValidators.next[currVal];\\r\\n            topValidators[nextIndex] = currVal;\\r\\n            nextIndex++;\\r\\n        }\\r\\n\\r\\n        return topValidators;\\r\\n    }\\r\\n\\r\\n    // punish validator\\r\\n    function punish(address validator, bool remove)\\r\\n        external\\r\\n        override\\r\\n        onlyPunishContract\\r\\n    {\\r\\n        //\\r\\n        if (remove) {\\r\\n            _setPoolStatus(validator, false);\\r\\n        }\\r\\n\\r\\n        uint256 punishAmount = maxPunishmentAmount;\\r\\n        PoolInfo storage pool = poolInfos[validator];\\r\\n        uint256 selfBallotsReward = pool\\r\\n            .accRewardPerShare\\r\\n            .mul(pool.selfBallots)\\r\\n            .div(1e12)\\r\\n            .sub(pool.selfBallotsRewardsDebt);\\r\\n\\r\\n        uint256 amount = 0;\\r\\n        if (pool.pendingFee >= punishAmount) {\\r\\n            // from pendingFee\\r\\n            pool.pendingFee = pool.pendingFee.sub(punishAmount);\\r\\n            pool.feeDebt = pool.feeDebt.add(punishAmount);\\r\\n            amount = punishAmount;\\r\\n        } else {\\r\\n            // from pendingFee + selfBallotsReward\\r\\n            uint256 sub = punishAmount.sub(pool.pendingFee);\\r\\n            amount = amount.add(pool.pendingFee);\\r\\n            pool.feeDebt = pool.feeDebt.add(pool.pendingFee);\\r\\n            pool.pendingFee = 0;\\r\\n\\r\\n            if (selfBallotsReward >= sub) {\\r\\n                pool.selfBallotsRewardsDebt = pool.selfBallotsRewardsDebt.add(\\r\\n                    sub\\r\\n                );\\r\\n                amount = amount.add(sub);\\r\\n            } else {\\r\\n                pool.selfBallotsRewardsDebt = pool.selfBallotsRewardsDebt.add(\\r\\n                    selfBallotsReward\\r\\n                );\\r\\n                amount = amount.add(selfBallotsReward);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _sendValue(payable(address(RESERVEPOOL_CONTRACT)), amount);\\r\\n\\r\\n        emit PunishValidator(validator, block.number, amount);\\r\\n    }\\r\\n\\r\\n    // Deposit ballot - KCS to the target validator for Reward allocation.\\r\\n    function vote(address _val) public payable nonReentrant {\\r\\n        PoolInfo storage pool = poolInfos[_val];\\r\\n        require(\\r\\n            pool.selfBallots >= minSelfBallots,\\r\\n            \\\"Validators: must require minSelfBallots\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            msg.sender != _val,\\r\\n            \\\"validator can only vote to himself by depositing margin.\\\"\\r\\n        );\\r\\n\\r\\n        uint256 ballotAmount = msg.value.div(VOTE_UNIT);\\r\\n\\r\\n        //\\r\\n        require(\\r\\n            msg.value > 0 && ballotAmount > 0,\\r\\n            \\\"Validators: votes must be integer multiple of 1 KCS.\\\"\\r\\n        );\\r\\n\\r\\n        uint256 ballotValue = ballotAmount.mul(VOTE_UNIT);\\r\\n        uint256 diff = msg.value.sub(ballotValue);\\r\\n\\r\\n        _vote(msg.sender, _val, ballotAmount, pool);\\r\\n\\r\\n        // @audit N1 Remove unsued accessControl\\r\\n        if (diff > 0) {\\r\\n            _safeTransfer(diff, msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Withdraw vote tokens from target pool.\\r\\n    function revokeVote(address _val, uint256 _amount) external nonReentrant {\\r\\n        require(\\r\\n            msg.sender != _val,\\r\\n            \\\"validator can only vote to himself by depositing margin.\\\"\\r\\n        );\\r\\n        _revokeVote(msg.sender, _val, _amount);\\r\\n    }\\r\\n\\r\\n    function withdraw(address _val) external nonReentrant {\\r\\n        require(\\r\\n            msg.sender != _val,\\r\\n            \\\"validator can only vote to himself by depositing margin.\\\"\\r\\n        );\\r\\n        require(\\r\\n            isWithdrawable(msg.sender, _val),\\r\\n            \\\"Validators: no ballots to withdraw or ballots are still locking.\\\"\\r\\n        );\\r\\n\\r\\n        _withdraw(msg.sender, _val);\\r\\n    }\\r\\n\\r\\n    // claim reward tokens from target pool.\\r\\n    function claimReward(address _val) external nonReentrant {\\r\\n        return _claimReward(_val);\\r\\n    }\\r\\n\\r\\n    // Claim commission fee of a validator\\r\\n    // @param _val the address of the validator\\r\\n    function claimFeeReward(address _val) external nonReentrant {\\r\\n        PoolInfo storage pool = poolInfos[_val];\\r\\n\\r\\n        require(pool.validator == _val, \\\"no such pool\\\");\\r\\n\\r\\n        require(\\r\\n            pool.manager == msg.sender,\\r\\n            \\\"Validators: only manager of the pool can claim fee rewards\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            pool.pendingFee > 0,\\r\\n            \\\"Validators: no pending fee reward to claim.\\\"\\r\\n        );\\r\\n\\r\\n        uint256 feeReward = pool.pendingFee;\\r\\n        pool.pendingFee = 0; // reset to 0\\r\\n        pool.feeDebt = pool.feeDebt.add(feeReward);\\r\\n\\r\\n        //\\r\\n        _safeTransfer(feeReward, msg.sender);\\r\\n\\r\\n        //\\r\\n        emit ClaimFeeReward(pool.validator, feeReward);\\r\\n    }\\r\\n\\r\\n    //\\r\\n    function isPool(address _validator) external view returns (bool) {\\r\\n        return (poolInfos[_validator].validator != address(0));\\r\\n    }\\r\\n\\r\\n    // A user's pending rewards in a pool of a validator.\\r\\n    function pendingReward(address _val, address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _calculatePendingReward(_val, _user);\\r\\n    }\\r\\n\\r\\n    // The voting summary of a user\\r\\n    function getUserVotingSummary(address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (VotingData[] memory votingDataList)\\r\\n    {\\r\\n        EnumerableSet.AddressSet storage recordIndexes = _votingRecordIndexInfo[\\r\\n            _user\\r\\n        ];\\r\\n\\r\\n        uint256 recordIndexesLength = EnumerableSet.length(recordIndexes);\\r\\n        votingDataList = new VotingData[](recordIndexesLength);\\r\\n\\r\\n        uint256 index = 0;\\r\\n        for (uint256 i = 0; i < recordIndexesLength; i++) {\\r\\n            address val = address(EnumerableSet.at(recordIndexes, i));\\r\\n\\r\\n            PoolInfo memory pool = poolInfos[val];\\r\\n            UserInfo memory user = userInfo[val][_user];\\r\\n            RevokingInfo memory revokingInfoItem = revokingInfo[_user][val];\\r\\n\\r\\n            uint256 pending = _calculatePendingReward(val, _user);\\r\\n            votingDataList[index] = VotingData({\\r\\n                validator: pool.validator,\\r\\n                validatorBallot: pool.suppliedBallots,\\r\\n                feeShares: pool.feeShares,\\r\\n                ballot: user.amount,\\r\\n                pendingReward: pending,\\r\\n                revokingBallot: revokingInfoItem.amount,\\r\\n                revokeLockingEndTime: revokingInfoItem.lockingEndTime\\r\\n            });\\r\\n            index = index.add(1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //\\r\\n    function isWithdrawable(address _user, address _val)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        RevokingInfo memory revokingInfoItem = revokingInfo[_user][_val];\\r\\n        return (revokingInfoItem.amount > 0 &&\\r\\n            block.timestamp >= revokingInfoItem.lockingEndTime); // solhint-disable not-rely-on-time\\r\\n    }\\r\\n\\r\\n    function _calculatePendingReward(address _val, address _user)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        PoolInfo memory pool = poolInfos[_val];\\r\\n        UserInfo memory user = userInfo[_val][_user];\\r\\n\\r\\n        return\\r\\n            user.amount.mul(pool.accRewardPerShare).div(1e12).sub(\\r\\n                user.rewardDebt\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _vote(\\r\\n        address _user,\\r\\n        address _val,\\r\\n        uint256 _amount,\\r\\n        PoolInfo storage pool\\r\\n    ) internal {\\r\\n        UserInfo storage user = userInfo[_val][_user];\\r\\n\\r\\n        if (user.amount > 0) {\\r\\n            uint256 pending = _calculatePendingReward(_val, _user);\\r\\n            if (pending > 0) {\\r\\n                _safeTransfer(pending, msg.sender);\\r\\n                emit ClaimReward(_user, _val, pending);\\r\\n            }\\r\\n        } else {\\r\\n            pool.voterNumber = pool.voterNumber.add(1);\\r\\n\\r\\n            EnumerableSet.AddressSet\\r\\n                storage recordIndexes = _votingRecordIndexInfo[_user];\\r\\n            EnumerableSet.add(recordIndexes, _val);\\r\\n        }\\r\\n\\r\\n        user.amount = user.amount.add(_amount);\\r\\n\\r\\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\\r\\n\\r\\n        pool.suppliedBallots = pool.suppliedBallots.add(_amount);\\r\\n\\r\\n        totalBallot = totalBallot.add(_amount);\\r\\n\\r\\n        if (pool.selfBallots >= minSelfBallots && pool.enabled) {\\r\\n            _sortedEnabledValidators.improveRanking(poolInfos, pool.validator);\\r\\n        }\\r\\n        // emit event\\r\\n        emit Vote(_user, _val, _amount);\\r\\n    }\\r\\n\\r\\n    function _withdraw(address _user, address _val) internal {\\r\\n        RevokingInfo storage revokingInfoItem = revokingInfo[_user][_val];\\r\\n        UserInfo memory user = userInfo[_val][_user];\\r\\n\\r\\n        uint256 amount = revokingInfoItem.amount;\\r\\n\\r\\n        revokingInfoItem.amount = 0;\\r\\n\\r\\n        _safeTransfer(amount.mul(VOTE_UNIT), msg.sender);\\r\\n\\r\\n        if (user.amount == 0) {\\r\\n            EnumerableSet.AddressSet\\r\\n                storage recordIndexes = _votingRecordIndexInfo[_user];\\r\\n\\r\\n            EnumerableSet.remove(recordIndexes, _val);\\r\\n        }\\r\\n        emit Withdraw(_user, _val, amount);\\r\\n    }\\r\\n\\r\\n    // @param _amount is the number of ballots\\r\\n    function _revokeVote(\\r\\n        address _user,\\r\\n        address _val,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        require(_amount > 0, \\\"the revoking amount must be greater than zero\\\");\\r\\n\\r\\n        PoolInfo storage pool = poolInfos[_val];\\r\\n        UserInfo storage user = userInfo[_val][_user];\\r\\n\\r\\n        uint256 availableAmount = user.amount;\\r\\n        require(\\r\\n            availableAmount >= _amount,\\r\\n            \\\"Validators: no enough ballots to revoke.\\\"\\r\\n        );\\r\\n\\r\\n        uint256 pending = _calculatePendingReward(_val, _user);\\r\\n\\r\\n        if (pending > 0) {\\r\\n            _safeTransfer(pending, msg.sender);\\r\\n            emit ClaimReward(_user, _val, pending);\\r\\n        }\\r\\n\\r\\n        if (isWithdrawable(_user, _val)) {\\r\\n            _withdraw(_user, _val);\\r\\n        }\\r\\n\\r\\n        pool.suppliedBallots = pool.suppliedBallots.sub(_amount);\\r\\n\\r\\n        user.amount = availableAmount.sub(_amount);\\r\\n\\r\\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\\r\\n\\r\\n        totalBallot = totalBallot.sub(_amount);\\r\\n\\r\\n        if (user.amount == 0) {\\r\\n            pool.voterNumber = pool.voterNumber.sub(1);\\r\\n        }\\r\\n\\r\\n        _updateRevokingInfo(_user, _val, _amount, revokeLockingDuration);\\r\\n\\r\\n        _sortedEnabledValidators.lowerRanking(poolInfos, _val);\\r\\n    }\\r\\n\\r\\n    function _safeTransfer(uint256 _amount, address to) internal {\\r\\n        uint256 totalSpendableReward = address(this).balance;\\r\\n        if (_amount > totalSpendableReward) {\\r\\n            _sendValue(payable(to), totalSpendableReward);\\r\\n            emit RewardTransfer(address(this), to, totalSpendableReward);\\r\\n        } else {\\r\\n            _sendValue(payable(to), _amount);\\r\\n            emit RewardTransfer(address(this), to, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        emit ReceiveKCS(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    function isActiveValidator(address val)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        for (uint256 i = 0; i < activeValidators.length; ++i) {\\r\\n            if (activeValidators[i] == val) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function getActiveValidators()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (address[] memory)\\r\\n    {\\r\\n        return activeValidators;\\r\\n    }\\r\\n\\r\\n    function depositMargin(address _val) external payable nonReentrant {\\r\\n        require(\\r\\n            msg.value > 0 && msg.value.mod(VOTE_UNIT) == 0,\\r\\n            \\\"Validators: votes must be integer multiple of 1 KCS.\\\"\\r\\n        );\\r\\n        uint256 ballots = msg.value.div(VOTE_UNIT);\\r\\n\\r\\n        require(\\r\\n            msg.sender == poolInfos[_val].manager,\\r\\n            \\\"pool does not exist or msg.sender is not the manager of the pool\\\"\\r\\n        );\\r\\n        PoolInfo storage pool = poolInfos[_val];\\r\\n\\r\\n        if (pool.selfBallots > 0) {\\r\\n            _validatorClaimReward(_val);\\r\\n        }\\r\\n\\r\\n        pool.selfBallots = pool.selfBallots.add(ballots);\\r\\n        pool.selfBallotsRewardsDebt = pool\\r\\n            .accRewardPerShare\\r\\n            .mul(pool.selfBallots)\\r\\n            .div(1e12);\\r\\n        pool.suppliedBallots = pool.suppliedBallots.add(ballots);\\r\\n        totalBallot = totalBallot.add(ballots);\\r\\n\\r\\n        if (pool.selfBallots >= minSelfBallots && pool.enabled) {\\r\\n            _sortedEnabledValidators.improveRanking(poolInfos, _val);\\r\\n        }\\r\\n\\r\\n        emit DepositMargin(msg.sender, _val, msg.value);\\r\\n    }\\r\\n\\r\\n    function redeemMargin(address _val, uint256 _amount) external nonReentrant {\\r\\n        require(\\r\\n            _amount > 0,\\r\\n            \\\"Validators: redeem amount must be greater than 0\\\"\\r\\n        );\\r\\n        require(\\r\\n            msg.sender == poolInfos[_val].manager,\\r\\n            \\\"pool does not exist or msg.sender is not the manager of the pool\\\"\\r\\n        );\\r\\n\\r\\n        PoolInfo storage pool = poolInfos[_val];\\r\\n        require(_amount <= pool.selfBallots, \\\"Validators: invalid amount.\\\");\\r\\n\\r\\n        _validatorClaimReward(_val);\\r\\n\\r\\n        if (isWithdrawable(_val, _val)) {\\r\\n            _withdrawMargin(msg.sender); // => redeemMargin\\r\\n        }\\r\\n\\r\\n        uint256 ballot = pool.suppliedBallots;\\r\\n        pool.suppliedBallots = ballot.sub(_amount);\\r\\n        totalBallot = totalBallot.sub(_amount);\\r\\n        pool.selfBallots = pool.selfBallots.sub(_amount);\\r\\n        pool.selfBallotsRewardsDebt = pool\\r\\n            .accRewardPerShare\\r\\n            .mul(pool.selfBallots)\\r\\n            .div(1e12);\\r\\n\\r\\n        if (pool.selfBallots < minSelfBallots) {\\r\\n            _sortedEnabledValidators.removeRanking(_val);\\r\\n        } else {\\r\\n            _sortedEnabledValidators.lowerRanking(poolInfos, _val);\\r\\n        }\\r\\n\\r\\n        _updateRevokingInfo(_val, _val, _amount, marginLockingDuration);\\r\\n\\r\\n        emit RedeemMargin(msg.sender, _val, _amount);\\r\\n    }\\r\\n\\r\\n    function _claimReward(address _val) internal {\\r\\n        UserInfo storage user = userInfo[_val][msg.sender];\\r\\n\\r\\n        uint256 pending = _calculatePendingReward(_val, msg.sender);\\r\\n        require(pending > 0, \\\"Validators: no pending reward to claim.\\\");\\r\\n\\r\\n        user.rewardDebt = user\\r\\n            .amount\\r\\n            .mul(poolInfos[_val].accRewardPerShare)\\r\\n            .div(1e12);\\r\\n        _safeTransfer(pending, msg.sender);\\r\\n\\r\\n        emit ClaimReward(msg.sender, _val, pending);\\r\\n    }\\r\\n\\r\\n    function updateCandidateInfo(\\r\\n        address _validator,\\r\\n        string memory details,\\r\\n        string memory website,\\r\\n        string memory email\\r\\n    ) external onlyAdmin {\\r\\n        require(bytes(details).length <= 3000, \\\"description is too long\\\");\\r\\n        require(bytes(website).length <= 100, \\\"website is too long\\\");\\r\\n        require(bytes(email).length <= 50, \\\"email is too long\\\");\\r\\n\\r\\n        Description storage desc = candidateInfos[_validator];\\r\\n\\r\\n        if (\\r\\n            bytes(details).length >= 0 &&\\r\\n            keccak256(bytes(details)) != keccak256(bytes(desc.details))\\r\\n        ) {\\r\\n            desc.details = details;\\r\\n        }\\r\\n        if (\\r\\n            bytes(website).length >= 0 &&\\r\\n            keccak256(bytes(website)) != keccak256(bytes(desc.website))\\r\\n        ) {\\r\\n            desc.website = website;\\r\\n        }\\r\\n        if (\\r\\n            bytes(email).length >= 0 &&\\r\\n            keccak256(bytes(email)) != keccak256(bytes(desc.email))\\r\\n        ) {\\r\\n            desc.email = email;\\r\\n        }\\r\\n\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    function _calculateValidatorPendingReward(address _val)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        PoolInfo memory pool = poolInfos[_val];\\r\\n\\r\\n        return\\r\\n            // roundoff error -\\r\\n            pool.selfBallots.mul(pool.accRewardPerShare).div(1e12).sub(\\r\\n                pool.selfBallotsRewardsDebt\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _validatorClaimReward(address _val) internal {\\r\\n        PoolInfo storage pool = poolInfos[_val];\\r\\n\\r\\n        //\\r\\n        uint256 pending = _calculateValidatorPendingReward(_val); // roundoff error -\\r\\n        if (pending > 0) {\\r\\n            // @audit PVE003\\r\\n            _safeTransfer(pending, pool.manager);\\r\\n        }\\r\\n        //\\r\\n        // roundoff error -\\r\\n        pool.selfBallotsRewardsDebt = pool\\r\\n            .selfBallots\\r\\n            .mul(pool.accRewardPerShare)\\r\\n            .div(1e12);\\r\\n        emit ValidatorClaimReward(_val, pending);\\r\\n    }\\r\\n\\r\\n    function _setPoolStatus(address _val, bool _enabled) internal {\\r\\n        PoolInfo storage pool = poolInfos[_val];\\r\\n        if (pool.enabled != _enabled) {\\r\\n            pool.enabled = _enabled;\\r\\n\\r\\n            if (!_enabled) {\\r\\n                _sortedEnabledValidators.removeRanking(_val);\\r\\n            } else {\\r\\n                _sortedEnabledValidators.improveRanking(poolInfos, _val);\\r\\n            }\\r\\n        }\\r\\n        emit SetPoolStatus(_val, _enabled);\\r\\n    }\\r\\n\\r\\n    function _updateRevokingInfo(\\r\\n        address _user,\\r\\n        address _val,\\r\\n        uint256 _amount,\\r\\n        uint256 lockingDuration\\r\\n    ) internal {\\r\\n        RevokingInfo storage revokingInfoItem = revokingInfo[_user][_val];\\r\\n        //\\r\\n        revokingInfoItem.amount = revokingInfoItem.amount.add(_amount);\\r\\n        revokingInfoItem.lockingEndTime = block.timestamp.add(lockingDuration); // solhint-disable not-rely-on-time\\r\\n\\r\\n        // emit event\\r\\n        emit Revoke(\\r\\n            _user,\\r\\n            _val,\\r\\n            revokingInfoItem.amount,\\r\\n            revokingInfoItem.lockingEndTime\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawMargin(address _val) external nonReentrant {\\r\\n        PoolInfo storage pool = poolInfos[_val];\\r\\n        require(pool.validator == _val, \\\"no such pool\\\");\\r\\n        require(\\r\\n            pool.manager == msg.sender,\\r\\n            \\\"operation is only allowed by manager\\\"\\r\\n        );\\r\\n        if (isWithdrawable(_val, _val)) {\\r\\n            _withdrawMargin(_val);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _withdrawMargin(address _val) internal {\\r\\n        RevokingInfo storage revokingInfoItem = revokingInfo[_val][_val];\\r\\n\\r\\n        uint256 amount = revokingInfoItem.amount;\\r\\n\\r\\n        revokingInfoItem.amount = 0;\\r\\n\\r\\n        _safeTransfer(amount.mul(VOTE_UNIT), msg.sender);\\r\\n    }\\r\\n\\r\\n    function claimSelfBallotsReward(address _val) external nonReentrant {\\r\\n        PoolInfo storage pool = poolInfos[_val];\\r\\n\\r\\n        require(pool.validator == _val, \\\"no such pool\\\");\\r\\n        require(\\r\\n            msg.sender == pool.manager,\\r\\n            \\\"only the pool manager can claim rewards\\\"\\r\\n        );\\r\\n\\r\\n        _validatorClaimReward(_val);\\r\\n    }\\r\\n\\r\\n    function getPoolSelfBallots(address val) external view returns (uint256) {\\r\\n        return poolInfos[val].selfBallots;\\r\\n    }\\r\\n\\r\\n    function getPoolSelfBallotsRewardsDebt(address val)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return poolInfos[val].selfBallotsRewardsDebt;\\r\\n    }\\r\\n\\r\\n    function getPoolfeeShares(address val) external view returns (uint256) {\\r\\n        return poolInfos[val].feeShares;\\r\\n    }\\r\\n\\r\\n    function getPoolpendingFee(address val) external view returns (uint256) {\\r\\n        return poolInfos[val].pendingFee;\\r\\n    }\\r\\n\\r\\n    function getPoolfeeDebt(address val) external view returns (uint256) {\\r\\n        return poolInfos[val].feeDebt;\\r\\n    }\\r\\n\\r\\n    function getPoollastRewardBlock(address val)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return poolInfos[val].lastRewardBlock;\\r\\n    }\\r\\n\\r\\n    function getPoolfeeSettLockingEndTime(address val)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return poolInfos[val].feeSettLockingEndTime;\\r\\n    }\\r\\n\\r\\n    function getPoolsuppliedBallot(address val)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return poolInfos[val].suppliedBallots;\\r\\n    }\\r\\n\\r\\n    function getPoolaccRewardPerShare(address val)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return poolInfos[val].accRewardPerShare;\\r\\n    }\\r\\n\\r\\n    function getPoolvoterNumber(address val) external view returns (uint256) {\\r\\n        return poolInfos[val].voterNumber;\\r\\n    }\\r\\n\\r\\n    function getPoolelectedNumber(address val) external view returns (uint256) {\\r\\n        return poolInfos[val].electedNumber;\\r\\n    }\\r\\n\\r\\n    function getPoolenabled(address val) external view override returns (bool) {\\r\\n        return poolInfos[val].enabled;\\r\\n    }\\r\\n\\r\\n    function getPoolManager(address val) external view returns (address) {\\r\\n        return poolInfos[val].manager;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf3057eb1ea74ef04cb02a02080a31e6cb3820f9917b65fdfe32f33d85b99b83a\",\"license\":\"MIT\"},\"contracts/interfaces/IProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n\\r\\ninterface IProposal {\\r\\n\\r\\n    function isProposalPassed(address val, bytes32 id) external view returns(bool);\\r\\n\\r\\n}\",\"keccak256\":\"0x3a14cd101741d401651690f9f4505a9238830b78e3c3ec0a47be4e8b5015828b\",\"license\":\"MIT\"},\"contracts/interfaces/IPunish.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\ninterface IPunish {\\r\\n    function punish(address _val) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x81e7412124aba81995f5f08f3e15cdde76a228d8759ef0ca01ddd2116d01dad6\",\"license\":\"MIT\"},\"contracts/interfaces/IReservePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\ninterface IReservePool {\\r\\n    function withdrawBlockReward() external returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x1552fe59b3b51be20d67f2b64ac0023e94d323e82f8defccbcb00e3ba66a8cff\",\"license\":\"MIT\"},\"contracts/interfaces/IValidators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n\\r\\ninterface IValidators {\\r\\n\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        address validator;   // Address of validator.\\r\\n        address manager; \\r\\n        uint256 selfBallots;      // The validator's Margin in ballots\\r\\n        uint256 selfBallotsRewardsDebt;  // The validator's reward debt corresponding to selfBallots \\r\\n        uint256 feeShares;   // The commission rate in 1/10000 \\r\\n        uint256 pendingFee;  // The pending commission fee of the validator \\r\\n        uint256 feeDebt;     // The validators's commission fee debt, i.e, commission fees already withdrawn \\r\\n        uint256 lastRewardBlock;   // Last block number that the validator is rewarded\\r\\n        uint256 feeSettLockingEndTime;  // feeShares can not be changed before feeSettLockingEndTime \\r\\n        uint256 suppliedBallots; // Total ballots voted to this validator \\r\\n        uint256 accRewardPerShare; // Accumulated KCSs per share, times 1e12.\\r\\n        uint256 voterNumber; // The number of votes of the validator \\r\\n        uint256 electedNumber; // The number of times the validator is rewarded.\\r\\n        bool enabled;    \\r\\n    }\\r\\n\\r\\n    // The detailed information of a validator \\r\\n    struct Description {\\r\\n        string website;\\r\\n        string email;\\r\\n        string details;\\r\\n    }\\r\\n\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // How many ballot tokens the user has provided.\\r\\n        uint256 rewardDebt; // Reward debt.\\r\\n    }\\r\\n\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct VotingData {\\r\\n        address validator;          //  The address of the validator \\r\\n        uint256 validatorBallot;    //  The total ballots of the validator \\r\\n        uint256 feeShares;          //  The commission rate of the validator in 1/10000\\r\\n        uint256 ballot;             //  The user's ballots in this validator \\r\\n        uint256 pendingReward;          // The user's pending reward \\r\\n        uint256 revokingBallot;         // The user's revoking ballots \\r\\n        uint256 revokeLockingEndTime;   // The user can withdraw KSCs corresponding to revokingBallot after revokeLockingEndTime\\r\\n    }\\r\\n\\r\\n    // The Revoking info of a user's ballots\\r\\n    struct RevokingInfo {\\r\\n        uint256 amount; // The amount of ballots that user is revoking \\r\\n        uint256 lockingEndTime; // The user can withdraw his/her revoking ballots after lockingEndTime\\r\\n    }\\r\\n\\r\\n    enum Operation {Distributed, UpdatedValidators}\\r\\n\\r\\n    function punish(address validator, bool remove) external; \\r\\n\\r\\n\\r\\n  \\r\\n    // @dev This can only be called by the miner from the KCC node. \\r\\n    function distributeBlockReward() external payable;\\r\\n    \\r\\n    function updateActiveValidatorSet(address[] calldata newSet)  external;\\r\\n\\r\\n    function getTopValidators()  external view returns (address[] memory); \\r\\n\\r\\n    function isActiveValidator(address val) external view returns (bool);\\r\\n\\r\\n    function getActiveValidators() external view returns (address[] memory);\\r\\n\\r\\n    function getPoolenabled(address val) external view returns (bool);\\r\\n\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x07f7f2f0bfb7ded7c01c8e7a7826dfcd721427cd7463b071e71dd30518b1b95c\",\"license\":\"MIT\"},\"contracts/library/SafeSend.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nabstract contract SafeSend {\\r\\n\\tfunction _sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success,) = recipient.call{value : amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n}\",\"keccak256\":\"0x52267cbe66563ee6441ffe3e63fec3c6c5ab9d3fee3c230eb4193e9987f0a977\",\"license\":\"MIT\"},\"contracts/library/SortedList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n\\r\\nimport \\\"../interfaces/IValidators.sol\\\";\\r\\n\\r\\nlibrary SortedLinkedList {\\r\\n    struct List {\\r\\n        address head;\\r\\n        address tail;\\r\\n        uint256 length;\\r\\n        mapping(address => address) prev;\\r\\n        mapping(address => address) next;\\r\\n    }\\r\\n\\r\\n    function improveRanking(\\r\\n     List storage _list, \\r\\n     mapping(address=> IValidators.PoolInfo) storage poolInfos, \\r\\n     address _value)\\r\\n    internal {\\r\\n        //insert new\\r\\n        if (_list.length == 0) {\\r\\n            _list.head = _value;\\r\\n            _list.tail = _value;\\r\\n            _list.length++;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        //already first\\r\\n        if (_list.head == _value) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        address _prev = _list.prev[_value];\\r\\n        // not in list\\r\\n        if (_prev == address(0)) {\\r\\n            //insert new\\r\\n            _list.length++;\\r\\n\\r\\n            if (poolInfos[ _value].suppliedBallots <= poolInfos[_list.tail].suppliedBallots) {\\r\\n                _list.prev[_value] = _list.tail;\\r\\n                _list.next[_list.tail] = _value;\\r\\n                _list.tail = _value;\\r\\n\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            _prev = _list.tail;\\r\\n        } else {\\r\\n            if (poolInfos[ _value].suppliedBallots <= poolInfos[ _prev].suppliedBallots) {\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            //remove from list\\r\\n            _list.next[_prev] = _list.next[_value];\\r\\n            if (_value == _list.tail) {\\r\\n                _list.tail = _prev;\\r\\n            } else {\\r\\n                _list.prev[_list.next[_value]] = _list.prev[_value];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        while (_prev != address(0) && poolInfos[ _value].suppliedBallots > poolInfos[ _prev].suppliedBallots) {\\r\\n            _prev = _list.prev[_prev];\\r\\n        }\\r\\n\\r\\n        if (_prev == address(0)) {\\r\\n            _list.next[_value] = _list.head;\\r\\n            _list.prev[_list.head] = _value;\\r\\n            _list.prev[_value] = address(0);\\r\\n            _list.head = _value;\\r\\n        } else {\\r\\n            _list.next[_value] = _list.next[_prev];\\r\\n            _list.prev[_list.next[_prev]] = _value;\\r\\n            _list.next[_prev] = _value;\\r\\n            _list.prev[_value] = _prev;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function lowerRanking(\\r\\n     List storage _list,\\r\\n     mapping(address=> IValidators.PoolInfo) storage poolInfos,\\r\\n     address _value)\\r\\n    internal {\\r\\n        address _next = _list.next[_value];\\r\\n        if (_list.tail == _value || _next == address(0) || poolInfos[ _next].suppliedBallots <= poolInfos[ _value].suppliedBallots) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        //remove it\\r\\n        _list.prev[_next] = _list.prev[_value];\\r\\n        if (_list.head == _value) {\\r\\n            _list.head = _next;\\r\\n        } else {\\r\\n            _list.next[_list.prev[_value]] = _next;\\r\\n        }\\r\\n\\r\\n        while (_next != address(0) && poolInfos[ _next].suppliedBallots > poolInfos[ _value].suppliedBallots) {\\r\\n            _next = _list.next[_next];\\r\\n        }\\r\\n\\r\\n        if (_next == address(0)) {\\r\\n            _list.prev[_value] = _list.tail;\\r\\n            _list.next[_value] = address(0);\\r\\n\\r\\n            _list.next[_list.tail] = _value;\\r\\n            _list.tail = _value;\\r\\n        } else {\\r\\n            _list.next[_list.prev[_next]] = _value;\\r\\n            _list.prev[_value] = _list.prev[_next];\\r\\n            _list.next[_value] = _next;\\r\\n            _list.prev[_next] = _value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function removeRanking(List storage _list, address _value)\\r\\n    internal {\\r\\n        if (_list.head != _value && _list.prev[_value] == address(0)) {\\r\\n            //not in list\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (_list.tail == _value) {\\r\\n            _list.tail = _list.prev[_value];\\r\\n        }\\r\\n\\r\\n        if (_list.head == _value) {\\r\\n            _list.head = _list.next[_value];\\r\\n        }\\r\\n\\r\\n        address _next = _list.next[_value];\\r\\n        if (_next != address(0)) {\\r\\n            _list.prev[_next] = _list.prev[_value];\\r\\n        }\\r\\n        address _prev = _list.prev[_value];\\r\\n        if (_prev != address(0)) {\\r\\n            _list.next[_prev] = _list.next[_value];\\r\\n        }\\r\\n\\r\\n        _list.prev[_value] = address(0);\\r\\n        _list.next[_value] = address(0);\\r\\n        _list.length--;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe44afc325b878d872813fc1e1c00249f869cdb98fb48e4c17af2f57a14ae21af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615ffd80620000216000396000f3fe6080604052600436106102f85760003560e01c80630c65f52c1461033d5780630f208beb1461035257806314f64c781461038957806318e018dc146103b6578063205f5180146103e357806323382609146103f85780632687e03a146104185780632e011c1e1461043857806333ad1e01146104675780633619e9c3146104875780633c3000ba146104a757806340550a1c146104bc57806346f75138146104e9578063496188e2146104fe5780634a9b826a1461051357806351cff8d9146105335780635463080f1461055357806356713343146105735780635785a619146105935780635b16ebb7146105b35780635b337c2c146105d35780635bcee382146105f357806360b1d7281461061357806360c80cbf1461062857806361167fe71461063d57806369ee53fa1461065d5780636dd7d8ea1461067d578063714897df1461069057806379c72850146106b25780637c01f053146106c5578063862fab42146106e5578063863a20b7146107055780638f2839701461071a578063967945c71461073a5780639ced7e761461075a5780639d771a041461077a5780639de702581461079a5780639e83513d146107bc578063a0dc2758146107d1578063a2340d37146107e6578063a4bfe25914610806578063a8bc58f214610826578063afeea1151461083b578063b21dfed214610850578063b7c1313514610870578063badca81914610890578063bbb9e4d1146108b0578063beb2291a146108c5578063c2657c4d146108f2578063c3d117bf14610912578063c457865814610932578063c46102cc14610952578063c531869d14610972578063c6a84c0314610987578063c76f8d40146109a7578063ce3d1daf146109c7578063d0840298146109e7578063d279c19114610a07578063d6c0edad14610a27578063dbff2dfd14610a2f578063e5a99f4f14610a44578063edf4a3c314610a59578063ee16442e14610a6e578063f1143a4614610a8e578063f165629614610aae578063f851a44014610ace578063fd2d4b6a14610ae357610338565b36610338577f23d6854f607f94ebfa6016da2a230f6517948e27c51aa087451196d47ddf6928333460405161032e9291906151c9565b60405180910390a1005b600080fd5b61035061034b366004614d0a565b610b03565b005b34801561035e57600080fd5b5061037261036d366004614d25565b610cc6565b604051610380929190615f4b565b60405180910390f35b34801561039557600080fd5b506103a96103a4366004615073565b610cea565b60405161038091906151b5565b3480156103c257600080fd5b506103d66103d1366004614d0a565b610d11565b6040516103809190615f32565b3480156103ef57600080fd5b506103d6610d33565b34801561040457600080fd5b506103a9610413366004614d0a565b610d39565b34801561042457600080fd5b506103d6610433366004614d0a565b610d5a565b34801561044457600080fd5b50610458610453366004614d0a565b610d78565b604051610380939291906152c3565b34801561047357600080fd5b50610350610482366004614e1f565b610f49565b34801561049357600080fd5b506103d66104a2366004614d0a565b610f5f565b3480156104b357600080fd5b506103d6610f7d565b3480156104c857600080fd5b506104dc6104d7366004614d0a565b610f83565b60405161038091906152b8565b3480156104f557600080fd5b506103a9610fde565b34801561050a57600080fd5b506103d6610fed565b34801561051f57600080fd5b506104dc61052e3660046150c6565b610ff3565b34801561053f57600080fd5b5061035061054e366004614d0a565b611013565b34801561055f57600080fd5b5061035061056e366004615073565b611097565b34801561057f57600080fd5b506104dc61058e366004614d0a565b611101565b34801561059f57600080fd5b506104dc6105ae366004615073565b611122565b3480156105bf57600080fd5b506104dc6105ce366004614d0a565b611137565b3480156105df57600080fd5b506103506105ee366004615073565b611157565b3480156105ff57600080fd5b5061035061060e366004614f15565b6111b6565b34801561061f57600080fd5b506103d661124b565b34801561063457600080fd5b506103a9611251565b34801561064957600080fd5b506103d6610658366004614d0a565b611260565b34801561066957600080fd5b506103d6610678366004614d0a565b61127e565b61035061068b366004614d0a565b61129c565b34801561069c57600080fd5b506106a56113b4565b6040516103809190615f23565b6103506106c0366004614d59565b6113b9565b3480156106d157600080fd5b506103506106e0366004614e1f565b611a41565b3480156106f157600080fd5b50610350610700366004614e56565b611bef565b34801561071157600080fd5b506103a9611d2f565b34801561072657600080fd5b50610350610735366004614d0a565b611d3e565b34801561074657600080fd5b506103d6610755366004614d0a565b611d68565b34801561076657600080fd5b506103d6610775366004614d25565b611d86565b34801561078657600080fd5b50610350610795366004614d0a565b611d9b565b3480156107a657600080fd5b506107af611e37565b60405161038091906151e2565b3480156107c857600080fd5b506103d6611e9a565b3480156107dd57600080fd5b506103d6611ea0565b3480156107f257600080fd5b506103d6610801366004614d0a565b611ea6565b34801561081257600080fd5b506103506108213660046150a3565b611ec4565b34801561083257600080fd5b506103d661201a565b34801561084757600080fd5b506107af612020565b34801561085c57600080fd5b506107af61086b366004614d0a565b612130565b34801561087c57600080fd5b5061035061088b366004614f54565b6121fb565b34801561089c57600080fd5b506104dc6108ab366004614d25565b612632565b3480156108bc57600080fd5b506103d6612699565b3480156108d157600080fd5b506108e56108e0366004614d0a565b61269f565b604051610380919061522f565b3480156108fe57600080fd5b506103d661090d366004614d0a565b612922565b34801561091e57600080fd5b5061035061092d366004615073565b612940565b34801561093e57600080fd5b5061035061094d366004614eeb565b61299f565b34801561095e57600080fd5b5061035061096d366004614d0a565b612b5f565b34801561097e57600080fd5b506103d6612bf3565b34801561099357600080fd5b506103506109a2366004614d0a565b612bff565b3480156109b357600080fd5b506103726109c2366004614d25565b612d26565b3480156109d357600080fd5b506103d66109e2366004614d0a565b612d4a565b3480156109f357600080fd5b506103d6610a02366004614d0a565b612d68565b348015610a1357600080fd5b50610350610a22366004614d0a565b612d86565b610350612da4565b348015610a3b57600080fd5b506103d661312c565b348015610a5057600080fd5b506103a9613132565b348015610a6557600080fd5b506103d6613141565b348015610a7a57600080fd5b50610350610a89366004614eeb565b613147565b348015610a9a57600080fd5b50610350610aa9366004615073565b613190565b348015610aba57600080fd5b506103d6610ac9366004614d0a565b6131ef565b348015610ada57600080fd5b506103a961320d565b348015610aef57600080fd5b50610350610afe366004615073565b61321c565b610b0b61327b565b6038805460ff60a01b191690553415801590610b365750610b3434670de0b6b3a76400006132a6565b155b610b5b5760405162461bcd60e51b8152600401610b52906154c9565b60405180910390fd5b6000610b6f34670de0b6b3a76400006132d8565b6001600160a01b03838116600090815260776020526040902060010154919250163314610bae5760405162461bcd60e51b8152600401610b52906157d2565b6001600160a01b0382166000908152607760205260409020600281015415610bd957610bd98361330a565b6002810154610be890836133b1565b60028201819055600a820154610c0e9164e8d4a5100091610c08916133d6565b906132d8565b60038201556009810154610c2290836133b1565b6009820155606a54610c3490836133b1565b606a55606f54600282015410801590610c515750600d81015460ff165b15610c6357610c636070607785613410565b826001600160a01b0316336001600160a01b03167ff297865ac57d5e90b6602e368c1ee6df8104228d78fce8ed8923b48a9694796434604051610ca69190615f32565b60405180910390a350506038805460ff60a01b1916600160a01b17905550565b607a6020908152600092835260408084209091529082529020805460019091015482565b607e8181548110610cf757fe5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b0381166000908152607760205260409020600601545b919050565b606b5481565b6001600160a01b039081166000908152607760205260409020600101541690565b6001600160a01b031660009081526077602052604090206005015490565b60786020908152600091825260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452909291839190830182828015610e0f5780601f10610de457610100808354040283529160200191610e0f565b820191906000526020600020905b815481529060010190602001808311610df257829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ead5780601f10610e8257610100808354040283529160200191610ead565b820191906000526020600020905b815481529060010190602001808311610e9057829003601f168201915b50505060028085018054604080516020601f6000196101006001871615020190941695909504928301859004850281018501909152818152959695945090925090830182828015610f3f5780601f10610f1457610100808354040283529160200191610f3f565b820191906000526020600020905b815481529060010190602001808311610f2257829003601f168201915b5050505050905083565b610f51613776565b610f5b82826137a0565b5050565b6001600160a01b031660009081526077602052604090206007015490565b606e5481565b6000805b607e54811015610fd557826001600160a01b0316607e8281548110610fa857fe5b6000918252602090912001546001600160a01b03161415610fcd576001915050610d2e565b600101610f87565b50600092915050565b6033546001600160a01b031681565b610bb881565b607660209081526000928352604080842090915290825290205460ff1681565b61101b61327b565b6038805460ff60a01b19169055336001600160a01b03821614156110515760405162461bcd60e51b8152600401610b5290615e6d565b61105b3382612632565b6110775760405162461bcd60e51b8152600401610b5290615ec5565b6110813382613835565b506038805460ff60a01b1916600160a01b179055565b61109f613776565b606e548114156110c15760405162461bcd60e51b8152600401610b5290615bc1565b606e8190556040517fd045295f12ef4f160f8803b90edaa025c769d65531eab370dc395fc297ac5ac7906110f6908390615f32565b60405180910390a150565b6001600160a01b03166000908152607760205260409020600d015460ff1690565b60796020526000908152604090205460ff1681565b6001600160a01b0390811660009081526077602052604090205416151590565b61115f613776565b606b548114156111815760405162461bcd60e51b8152600401610b5290615bc1565b606b8190556040517fb1af0e731cd364da26a491d6c9e37100decbf030b0f444b8eb3601dfec2ade3a906110f6908390615f32565b6111be61393b565b60375443816111c957fe5b06156111e75760405162461bcd60e51b8152600401610b529061546a565b43600090815260766020908152604080832060018085529252909120805460ff19169091179055801580159061121e5750601d8111155b61123a5760405162461bcd60e51b8152600401610b529061598b565b611246607e8383614a3a565b505050565b606d5481565b6036546001600160a01b031681565b6001600160a01b031660009081526077602052604090206003015490565b6001600160a01b03166000908152607760205260409020600b015490565b6112a461327b565b6038805460ff60a01b191690556001600160a01b0381166000908152607760205260409020606f54600282015410156112ef5760405162461bcd60e51b8152600401610b5290615cbe565b336001600160a01b03831614156113185760405162461bcd60e51b8152600401610b5290615e6d565b600061132c34670de0b6b3a76400006132d8565b905060003411801561133e5750600081115b61135a5760405162461bcd60e51b8152600401610b52906154c9565b600061136e82670de0b6b3a76400006133d6565b9050600061137c348361395a565b905061138a33868587613982565b801561139a5761139a8133613b14565b50506038805460ff60a01b1916600160a01b179055505050565b601d81565b6113c161327b565b6038805460ff60a01b191690556113e034670de0b6b3a76400006132a6565b156113fd5760405162461bcd60e51b8152600401610b52906153dd565b60008581526079602052604090205460ff161561142c5760405162461bcd60e51b8152600401610b5290615d32565b60008581526079602052604090819020805460ff1916600117905560355490516377f085c560e01b81526001600160a01b03909116906377f085c590611478908a9089906004016151c9565b60206040518083038186803b15801561149057600080fd5b505afa1580156114a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c89190615057565b6114e45760405162461bcd60e51b8152600401610b52906159c2565b6038546001600160a01b03163314806115055750336001600160a01b038816145b6115215760405162461bcd60e51b8152600401610b5290615830565b6001600160a01b0387166115475760405162461bcd60e51b8152600401610b5290615b8e565b610bb88411156115695760405162461bcd60e51b8152600401610b5290615a33565b6001600160a01b0387166000908152607760205260409020600d015460ff16156115a55760405162461bcd60e51b8152600401610b5290615e37565b60006115b934670de0b6b3a76400006132d8565b6001600160a01b03808a166000818152607760205260409020549293509116141561176e576001600160a01b0388166000908152607760205260409020606f5460028201541061160c5761160c8961330a565b6001600160a01b0388166000908152607d6020526040902061162e908a613bad565b50600281015461163e90836133b1565b60028201819055600a82015461165e9164e8d4a5100091610c08916133d6565b6003820155600981015461167290836133b1565b6009820155600d81018054600160ff199091168117909155810180546001600160a01b0319166001600160a01b038a8116919091179091558916600090815260786020908152604090912085516116cb92870190614a9d565b506001600160a01b038916600090815260786020908152604090912084516116fb92600190920191860190614a9d565b506001600160a01b0389166000908152607860209081526040909120865161172b92600290920191880190614a9d565b50876001600160a01b0316896001600160a01b0316600080516020615f68833981519152886001604051611760929190615f3b565b60405180910390a3506119e3565b604051806101c00160405280896001600160a01b03168152602001886001600160a01b031681526020018281526020016000815260200186815260200160008152602001600081526020014381526020016117d4606c54426133b190919063ffffffff16565b815260200182815260200160008152602001600081526020016000815260200160011515815250607760008a6001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b015561018082015181600c01556101a082015181600d0160006101000a81548160ff021916908315150217905550905050604051806060016040528084815260200183815260200185815250607860008a6001600160a01b03166001600160a01b03168152602001908152602001600020600082015181600001908051906020019061196d929190614a9d565b5060208281015180516119869260018501920190614a9d565b50604082015180516119a2916002840191602090910190614a9d565b50905050866001600160a01b0316886001600160a01b0316600080516020615f688339815191528760006040516119da929190615f3b565b60405180910390a35b606f546001600160a01b03891660009081526077602052604090206002015410611a1457611a14607060778a613410565b606a54611a2190826133b1565b606a5550506038805460ff60a01b1916600160a01b179055505050505050565b611a49613bc2565b8015611a5a57611a5a8260006137a0565b606e546001600160a01b038316600090815260776020526040812060038101546002820154600a830154929392611aa79291611aa19164e8d4a5100091610c0891906133d6565b9061395a565b9050600083836005015410611ae5576005830154611ac5908561395a565b60058401556006830154611ad990856133b1565b60068401555082611b8f565b6000611afe84600501548661395a90919063ffffffff16565b9050611b178460050154836133b190919063ffffffff16565b9150611b34846005015485600601546133b190919063ffffffff16565b600685015560006005850155808310611b6c576003840154611b5690826133b1565b6003850155611b6582826133b1565b9150611b8d565b6003840154611b7b90846133b1565b6003850155611b8a82846133b1565b91505b505b603654611ba5906001600160a01b031682613bec565b43866001600160a01b03167f05599b2455d2edd13c543d8ec4cee26e688c66fce9029652baa0abdfcecda43583604051611bdf9190615f32565b60405180910390a3505050505050565b611bf7613776565b610bb883511115611c1a5760405162461bcd60e51b8152600401610b52906157a1565b606482511115611c3c5760405162461bcd60e51b8152600401610b5290615d05565b603281511115611c5e5760405162461bcd60e51b8152600401610b5290615960565b6001600160a01b038416600090815260786020526040902080600201604051611c879190615145565b6040518091039020848051906020012014611cb3578351611cb19060028301906020870190614a9d565b505b604051611cc1908290615145565b6040518091039020838051906020012014611cea578251611ce89082906020860190614a9d565b505b80600101604051611cfb9190615145565b6040518091039020828051906020012014611d27578151611d259060018301906020850190614a9d565b505b505b50505050565b6035546001600160a01b031681565b611d46613776565b603880546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b031660009081526077602052604090206008015490565b6000611d928383613c88565b90505b92915050565b611da361327b565b6038805460ff60a01b191690556001600160a01b038082166000818152607760205260409020805490921614611deb5760405162461bcd60e51b8152600401610b5290615390565b60018101546001600160a01b03163314611e175760405162461bcd60e51b8152600401610b5290615b47565b611e208261330a565b50506038805460ff60a01b1916600160a01b179055565b6060607e805480602002602001604051908101604052809291908181526020018280548015611e8f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611e71575b505050505090505b90565b606c5481565b60375481565b6001600160a01b031660009081526077602052604090206004015490565b6001600160a01b03818116600090815260776020526040902060018101549091163314611f035760405162461bcd60e51b8152600401610b5290615c5c565b600d81015460ff16611f275760405162461bcd60e51b8152600401610b5290615bf8565b80546001600160a01b0316611f4e5760405162461bcd60e51b8152600401610b52906156bc565b610bb8831115611f705760405162461bcd60e51b8152600401610b5290615a33565b8060080154421015611f945760405162461bcd60e51b8152600401610b529061585b565b8060040154831415611fb85760405162461bcd60e51b8152600401610b5290615c25565b60048101839055606c54611fcd9042906133b1565b60088201556040516001600160a01b038316907f3b72e0b66d7c778f32dd63a45b08880ca99a150c9d330e5c5a7065ae70030d3e9061200d908690615f32565b60405180910390a2505050565b60755481565b60606000612038601d61ffff16607060020154613dc4565b905080612055575050604080516000815260208101909152611e97565b6060816001600160401b038111801561206d57600080fd5b50604051908082528060200260200182016040528015612097578160200160208202803683370190505b5060705481519192506001600160a01b031690819083906000906120b757fe5b6001600160a01b039092166020928302919091019091015260015b83811015612127576001600160a01b039182166000908152607460205260409020548351921691829084908390811061210757fe5b6001600160a01b03909216602092830291909101909101526001016120d2565b50909250505090565b6001600160a01b0381166000908152607d6020526040812060609161215482613dda565b90506060816001600160401b038111801561216e57600080fd5b50604051908082528060200260200182016040528015612198578160200160208202803683370190505b5090506000805b838110156121f05760006121b38683613de5565b9050808484815181106121c257fe5b6001600160a01b03909216602092830291909101909101526121e58360016133b1565b92505060010161219f565b509095945050505050565b600054610100900460ff16806122145750612214613df1565b80612222575060005460ff16155b61223e5760405162461bcd60e51b8152600401610b5290615ab2565b600054610100900460ff16158015612269576000805460ff1961ff0019909116610100171660011790555b8b8814801561227757508b8a145b801561228257508b15155b61229e5760405162461bcd60e51b8152600401610b5290615934565b6203f480606b556213c680606d5562015180606c5568056bc75e2d63100000606e556000606f8190556122e590670de0b6b3a7640000906122df908f6133d6565b906133d6565b4710156123045760405162461bcd60e51b8152600401610b529061551d565b61230d87613df7565b61231a8686868686613e95565b612322613f6b565b60005b8c81101561258d5760008e8e8381811061233b57fe5b90506020020160208101906123509190614d0a565b905060008b8b8481811061236057fe5b6001600160a01b03851660009081526077602090815260409091209102929092013592508f90508e8581811061239257fe5b90506020020160208101906123a79190614d0a565b6001820180546001600160a01b03199081166001600160a01b0393841617909155825416908416178155606f546002820155600481018290556000600582018190556006820155436007820155606c546124029042906133b1565b6008820155606f5460098201556000600a8201819055600b8201819055600c8201819055600d8201805460ff191660011790556001600160a01b038416815260786020908152604080832081519283019182905291839052909161246a916002840191614a9d565b5060408051602081019182905260009081905261248b916001840191614a9d565b506040805160208101918290526000908190526124a9918391614a9d565b506124b76070607786613410565b607e54601d111561250e57607e80546001810182556000919091527f0f2ada1f2dbae48ae468fe0cdb7bcda7d0cffee8545442e682273ba01a6203a70180546001600160a01b0319166001600160a01b0386161790555b6009820154606a5461251f916133b1565b606a558f8f8681811061252e57fe5b90506020020160208101906125439190614d0a565b6001600160a01b0316846001600160a01b0316600080516020615f68833981519152856000604051612576929190615f3b565b60405180910390a350505050806001019050612325565b5060005b8c81101561261057612607607d60008e8e858181106125ac57fe5b90506020020160208101906125c19190614d0a565b6001600160a01b03166001600160a01b031681526020019081526020016000208f8f848181106125ed57fe5b90506020020160208101906126029190614d0a565b613bad565b50600101612591565b508015612623576000805461ff00191690555b50505050505050505050505050565b600061263c614b17565b506001600160a01b038084166000908152607b60209081526040808320938616835292815290829020825180840190935280548084526001909101549183019190915215801590612691575080602001514210155b949350505050565b606f5481565b6001600160a01b0381166000908152607c602052604081206060916126c382613dda565b9050806001600160401b03811180156126db57600080fd5b5060405190808252806020026020018201604052801561271557816020015b612702614b31565b8152602001906001900390816126fa5790505b5092506000805b828110156129195760006127308583613de5565b905061273a614b77565b506001600160a01b0380821660009081526077602090815260409182902082516101c0810184528154851681526001820154909416918401919091526002810154918301919091526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e083015260088101546101008301526009810154610120830152600a810154610140830152600b810154610160830152600c810154610180830152600d015460ff1615156101a0820152612802614b17565b506001600160a01b038083166000908152607a60209081526040808320938c168352928152908290208251808401909352805483526001015490820152612847614b17565b506001600160a01b03808a166000908152607b602090815260408083209387168352928152828220835180850190945280548452600101549083015261288d858c613c88565b90506040518060e0016040528085600001516001600160a01b03168152602001856101200151815260200185608001518152602001846000015181526020018281526020018360000151815260200183602001518152508a88815181106128f057fe5b60209081029190910101526129068760016133b1565b9650506001909401935061271c92505050565b50505050919050565b6001600160a01b031660009081526077602052604090206002015490565b612948613776565b606f5481141561296a5760405162461bcd60e51b8152600401610b5290615bc1565b606f8190556040517faa013f7784cb6a7e4b908ae680fb75d44d826bcec005582a91d91cc8eba9c5f8906110f6908390615f32565b6129a761327b565b6038805460ff60a01b19169055806129d15760405162461bcd60e51b8152600401610b5290615de7565b6001600160a01b03828116600090815260776020526040902060010154163314612a0d5760405162461bcd60e51b8152600401610b52906157d2565b6001600160a01b03821660009081526077602052604090206002810154821115612a495760405162461bcd60e51b8152600401610b5290615561565b612a528361330a565b612a5c8384612632565b15612a6a57612a6a33613ff6565b6009810154612a79818461395a565b6009830155606a54612a8b908461395a565b606a556002820154612a9d908461395a565b60028301819055600a830154612abd9164e8d4a5100091610c08916133d6565b6003830155606f5460028301541015612ae057612adb607085614031565b612aed565b612aed6070607786614204565b612afb848585606d54614474565b836001600160a01b0316336001600160a01b03167f25f15cdd571a1fdd95de770368cf68023dc79c8d2d4a0f35208a3b0b07bf23bc85604051612b3e9190615f32565b60405180910390a350506038805460ff60a01b1916600160a01b1790555050565b612b6761327b565b6038805460ff60a01b191690556001600160a01b038082166000818152607760205260409020805490921614612baf5760405162461bcd60e51b8152600401610b5290615390565b60018101546001600160a01b03163314612bdb5760405162461bcd60e51b8152600401610b52906155cd565b612be58283612632565b15611e2057611e2082613ff6565b670de0b6b3a764000081565b612c0761327b565b6038805460ff60a01b191690556001600160a01b038082166000818152607760205260409020805490921614612c4f5760405162461bcd60e51b8152600401610b5290615390565b60018101546001600160a01b03163314612c7b5760405162461bcd60e51b8152600401610b5290615410565b6000816005015411612c9f5760405162461bcd60e51b8152600401610b5290615d9c565b60058101805460009091556006820154612cb990826133b1565b6006830155612cc88133613b14565b81546040516001600160a01b03909116907fa847ccfc1c24e1b6493e19c018745f8e9f60288140e209713efc58517bfc0ce390612d06908490615f32565b60405180910390a250506038805460ff60a01b1916600160a01b17905550565b607b6020908152600092835260408084209091529082529020805460019091015482565b6001600160a01b03166000908152607760205260409020600a015490565b6001600160a01b031660009081526077602052604090206009015490565b612d8e61327b565b6038805460ff60a01b19169055611081816144f9565b612dac61393b565b612db461327b565b6038805460ff60a01b1916905543600090815260766020908152604080832083805290915290205460ff1615612dfc5760405162461bcd60e51b8152600401610b529061566b565b4360009081526076602090815260408083208380528252808320805460ff19166001179055603654815163cf813c1d60e01b815291516001600160a01b039091169263cf813c1d926004808201939182900301818787803b158015612e6057600080fd5b505af1158015612e74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e98919061508b565b905080612ea55750613117565b600080612ebd836075546133b190919063ffffffff16565b607e54909150600090156130e5576000805b607e5460ff82161015612f8a57600060776000607e8460ff1681548110612ef257fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020606f54600282015491925011801590612f335750600d81015460ff165b15612f8157612f7e60776000607e8560ff1681548110612f4f57fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190206009015484906133b1565b92505b50600101612ecf565b5080156130e3576000612f9d84836132d8565b905060005b607e5460ff821610156130e057600060776000607e8460ff1681548110612fc557fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020606f54600282015491925011806130055750600d81015460ff16155b1561301057506130d8565b60006130298260090154856133d690919063ffffffff16565b9050600061304a612710610c088560040154856133d690919063ffffffff16565b600584015490915061305c90826133b1565b6005840155600061306d838361395a565b905061309d6130928560090154610c0864e8d4a51000856133d690919063ffffffff16565b600a860154906133b1565b600a8501556130ac88846133b1565b436007860155600c8501549098506130c59060016133b1565b600c909401939093555050600190960195505b600101612fa2565b50505b505b808210156131055760405162461bcd60e51b8152600401610b52906158dc565b61310f828261395a565b607555505050505b6038805460ff60a01b1916600160a01b179055565b61271081565b6034546001600160a01b031681565b606a5481565b61314f61327b565b6038805460ff60a01b19169055336001600160a01b03831614156131855760405162461bcd60e51b8152600401610b5290615e6d565b611e203383836145bd565b613198613776565b606d548114156131ba5760405162461bcd60e51b8152600401610b5290615bc1565b606d8190556040517f6fff7f86bcaae80aa63d8c5380045b255699fbf83b399caec3278c8cccb82263906110f6908390615f32565b6001600160a01b03166000908152607760205260409020600c015490565b6038546001600160a01b031681565b613224613776565b606c548114156132465760405162461bcd60e51b8152600401610b5290615bc1565b606c8190556040517f836d4870c480e504f7e59c68ff0ab6582d14af4475c2a66c16a8f2a0b6c3fd9b906110f6908390615f32565b603854600160a01b900460ff166132a45760405162461bcd60e51b8152600401610b5290615d65565b565b60008082116132c75760405162461bcd60e51b8152600401610b52906158aa565b8183816132d057fe5b069392505050565b60008082116132f95760405162461bcd60e51b8152600401610b5290615720565b81838161330257fe5b049392505050565b6001600160a01b03811660009081526077602052604081209061332c8361472e565b9050801561334d57600182015461334d9082906001600160a01b0316613b14565b61337164e8d4a51000610c0884600a015485600201546133d690919063ffffffff16565b60038301556040516001600160a01b038416907fef89e1a1006e92f5c35aeca19e2099abded5e99c36b1f1dcdd7131398794c3259061200d908490615f32565b600082820183811015611d925760405162461bcd60e51b8152600401610b5290615494565b6000826133e557506000611d95565b828202828482816133f257fe5b0414611d925760405162461bcd60e51b8152600401610b52906159f2565b60028301546134555782546001600160a01b0382166001600160a01b031991821681178555600180860180549093169091179091556002840180549091019055611246565b82546001600160a01b038281169116141561346f57611246565b6001600160a01b03808216600090815260038501602052604090205416806135435760028401805460019081019091558401546001600160a01b039081166000908152602085905260408082206009908101549386168352912001541161352f57506001830180546001600160a01b038381166000818152600388016020908152604080832080549686166001600160a01b0319978816179055865490941682526004890190529190912080548316821790558254909116179055611246565b5060018301546001600160a01b0316613628565b6001600160a01b03808216600090815260208590526040808220600990810154938616835291200154116135775750611246565b6001600160a01b038083166000818152600487016020526040808220548585168352912080546001600160a01b031916918416919091179055600186015490911614156135e0576001840180546001600160a01b0319166001600160a01b038316179055613628565b6001600160a01b03808316600090815260038601602081815260408084205460048a01835281852054861685529290915290912080546001600160a01b031916919092161790555b5b6001600160a01b0381161580159061366757506001600160a01b03808216600090815260208590526040808220600990810154938616835291200154115b1561368e576001600160a01b03908116600090815260038501602052604090205416613629565b6001600160a01b0381166137025783546001600160a01b038381166000818152600488016020908152604080832080549686166001600160a01b0319978816179055895490941682526003890190528281208054851683179055818152919091208054831690558554909116178455611d29565b6001600160a01b0390811660008181526004860160209081526040808320805496861680855282852080549888166001600160a01b0319998a161790558154909616845260039098019091528082208054861685179055865485168417909655918252939020805490911690921790915550565b6038546001600160a01b031633146132a45760405162461bcd60e51b8152600401610b52906153b6565b6001600160a01b0382166000908152607760205260409020600d81015460ff161515821515146137fc57600d8101805460ff1916831515179055816137ef576137ea607084614031565b6137fc565b6137fc6070607785613410565b826001600160a01b03167f2f62a1a1d6859de456dd8107c09e738da088ceb9f87d90c2e31f91fb3e89b7278360405161200d91906152b8565b6001600160a01b038083166000908152607b60209081526040808320938516835292905220613862614b17565b506001600160a01b038083166000908152607a602090815260408083209387168352928152828220835180850190945280548452600101549083015282549083556138be6138b882670de0b6b3a76400006133d6565b33613b14565b81516138e9576001600160a01b0385166000908152607c602052604090206138e6818661481f565b50505b836001600160a01b0316856001600160a01b03167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb8360405161392c9190615f32565b60405180910390a35050505050565b3341146132a45760405162461bcd60e51b8152600401610b5290615a8e565b60008282111561397c5760405162461bcd60e51b8152600401610b5290615596565b50900390565b6001600160a01b038084166000908152607a60209081526040808320938816835292905220805415613a0c5760006139ba8587613c88565b90508015613a06576139cc8133613b14565b846001600160a01b0316866001600160a01b0316600080516020615f88833981519152836040516139fd9190615f32565b60405180910390a35b50613a46565b600b820154613a1c9060016133b1565b600b8301556001600160a01b0385166000908152607c60205260409020613a438186613bad565b50505b8054613a5290846133b1565b808255600a830154613a6f9164e8d4a5100091610c0891906133d6565b60018201556009820154613a8390846133b1565b6009830155606a54613a9590846133b1565b606a55606f54600283015410801590613ab25750600d82015460ff165b15613ad1578154613ad1906070906077906001600160a01b0316613410565b836001600160a01b0316856001600160a01b03167f66a9138482c99e9baf08860110ef332cc0c23b4a199a53593d8db0fc8f96fbfc8560405161392c9190615f32565b4780831115613b6557613b278282613bec565b816001600160a01b0316306001600160a01b0316600080516020615fa883398151915283604051613b589190615f32565b60405180910390a3611246565b613b6f8284613bec565b816001600160a01b0316306001600160a01b0316600080516020615fa883398151915285604051613ba09190615f32565b60405180910390a3505050565b6000611d92836001600160a01b038416614834565b6034546001600160a01b031633146132a45760405162461bcd60e51b8152600401610b5290615c90565b80471015613c0c5760405162461bcd60e51b8152600401610b52906156e9565b6000826001600160a01b031682604051613c2590611e97565b60006040518083038185875af1925050503d8060008114613c62576040519150601f19603f3d011682016040523d82523d6000602084013e613c67565b606091505b50509050806112465760405162461bcd60e51b8152600401610b5290615611565b6000613c92614b77565b506001600160a01b0380841660009081526077602090815260409182902082516101c0810184528154851681526001820154909416918401919091526002810154918301919091526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e083015260088101546101008301526009810154610120830152600a810154610140830152600b810154610160830152600c810154610180830152600d015460ff1615156101a0820152613d5a614b17565b506001600160a01b038085166000908152607a6020908152604080832093871683529281529082902082518084019093528054808452600190910154918301829052610140840151613dbb9291611aa19164e8d4a5100091610c08916133d6565b95945050505050565b6000818310613dd35781611d92565b5090919050565b6000611d958261487e565b6000611d928383614882565b303b1590565b600054610100900460ff1680613e105750613e10613df1565b80613e1e575060005460ff16155b613e3a5760405162461bcd60e51b8152600401610b5290615ab2565b600054610100900460ff16158015613e65576000805460ff1961ff0019909116610100171660011790555b603880546001600160a01b0319166001600160a01b0384161790558015610f5b576000805461ff00191690555050565b600054610100900460ff1680613eae5750613eae613df1565b80613ebc575060005460ff16155b613ed85760405162461bcd60e51b8152600401610b5290615ab2565b600054610100900460ff16158015613f03576000805460ff1961ff0019909116610100171660011790555b603380546001600160a01b038089166001600160a01b0319928316179092556034805488841690831617905560358054878416908316179055603680549286169290911691909117905560378290558015611d25576000805461ff0019169055505050505050565b600054610100900460ff1680613f845750613f84613df1565b80613f92575060005460ff16155b613fae5760405162461bcd60e51b8152600401610b5290615ab2565b600054610100900460ff16158015613fd9576000805460ff1961ff0019909116610100171660011790555b613fe16148c7565b8015613ff3576000805461ff00191690555b50565b6001600160a01b0381166000908152607b6020908152604080832090915281208054918155906112466138b882670de0b6b3a76400006133d6565b81546001600160a01b0382811691161480159061406857506001600160a01b03818116600090815260038401602052604090205416155b1561407257610f5b565b60018201546001600160a01b03828116911614156140be576001600160a01b0380821660009081526003840160205260409020546001840180546001600160a01b031916919092161790555b81546001600160a01b0382811691161415614101576001600160a01b03808216600090815260048401602052604090205483546001600160a01b03191691161782555b6001600160a01b03808216600090815260048401602052604090205416801561415c576001600160a01b038083166000908152600385016020526040808220548484168352912080546001600160a01b031916919092161790555b6001600160a01b0380831660009081526003850160205260409020541680156141b7576001600160a01b038084166000908152600486016020526040808220548484168352912080546001600160a01b031916919092161790555b50506001600160a01b03166000908152600382016020908152604080832080546001600160a01b031990811690915560048501909252909120805490911690556002018054600019019055565b6001600160a01b03808216600081815260048601602052604090205460018601549083169216148061423d57506001600160a01b038116155b8061426f57506001600160a01b0380831660009081526020859052604080822060099081015493851683529120015411155b1561427a5750611246565b6001600160a01b038083166000818152600387016020526040808220548585168352912080546001600160a01b031916918416919091179055855490911614156142dc5783546001600160a01b0319166001600160a01b03821617845561431e565b6001600160a01b0382811660009081526003860160209081526040808320548416835260048801909152902080546001600160a01b0319169183169190911790555b5b6001600160a01b0381161580159061435d57506001600160a01b03808316600090815260208590526040808220600990810154938516835291200154115b15614384576001600160a01b0390811660009081526004850160205260409020541661431f565b6001600160a01b0381166143fa576001840180546001600160a01b038481166000818152600389016020908152604080832080549686166001600160a01b031997881617905560048b01909152808220805486169055855490931681529190912080548316821790558254909116179055611d29565b6001600160a01b0390811660008181526003860160208181526040808420805487168552600490990180835281852080546001600160a01b0319908116998916998a179091558484528a54898752838720805491909916908216179097558252832080548616851790559290915290528354161790915550565b6001600160a01b038085166000908152607b6020908152604080832093871683529290522080546144a590846133b1565b81556144b142836133b1565b6001820181905581546040516001600160a01b0380881693908916927fd6f80c7d68e3e62bd7a51c3d37e575c1cfbc311c07487b69ef4eb570bc21cb689261392c9290615f4b565b6001600160a01b0381166000908152607a6020908152604080832033808552925282209190614529908490613c88565b90506000811161454b5760405162461bcd60e51b8152600401610b5290615b00565b6001600160a01b0383166000908152607760205260409020600a0154825461457d9164e8d4a5100091610c08916133d6565b600183015561458c8133613b14565b826001600160a01b0316336001600160a01b0316600080516020615f8883398151915283604051613ba09190615f32565b600081116145dd5760405162461bcd60e51b8152600401610b5290615754565b6001600160a01b038083166000908152607760209081526040808320607a8352818420948816845293909152902080548381101561462d5760405162461bcd60e51b8152600401610b5290615306565b60006146398688613c88565b905080156146855761464b8133613b14565b856001600160a01b0316876001600160a01b0316600080516020615f888339815191528360405161467c9190615f32565b60405180910390a35b61468f8787612632565b1561469e5761469e8787613835565b60098401546146ad908661395a565b60098501556146bc828661395a565b808455600a8501546146d99164e8d4a5100091610c0891906133d6565b6001840155606a546146eb908661395a565b606a55825461470a57600b84015461470490600161395a565b600b8501555b614718878787606b54614474565b6147256070607788614204565b50505050505050565b6000614738614b77565b506001600160a01b0380831660009081526077602090815260409182902082516101c081018452815485168152600182015490941691840191909152600281015491830182905260038101546060840181905260048201546080850152600582015460a0850152600682015460c0850152600782015460e085015260088201546101008501526009820154610120850152600a8201546101408501819052600b830154610160860152600c830154610180860152600d9092015460ff1615156101a0850152614818929091611aa19164e8d4a5100091610c0891906133d6565b9392505050565b6000611d92836001600160a01b03841661495c565b60006148408383614a22565b61487657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611d95565b506000611d95565b5490565b815460009082106148a55760405162461bcd60e51b8152600401610b529061534e565b8260000182815481106148b457fe5b9060005260206000200154905092915050565b600054610100900460ff16806148e057506148e0613df1565b806148ee575060005460ff16155b61490a5760405162461bcd60e51b8152600401610b5290615ab2565b600054610100900460ff16158015614935576000805460ff1961ff0019909116610100171660011790555b6038805460ff60a01b1916600160a01b1790558015613ff3576000805461ff001916905550565b60008181526001830160205260408120548015614a18578354600019808301919081019060009087908390811061498f57fe5b90600052602060002001549050808760000184815481106149ac57fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806149dc57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611d95565b6000915050611d95565b60009081526001919091016020526040902054151590565b828054828255906000526020600020908101928215614a8d579160200282015b82811115614a8d5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190614a5a565b50614a99929150614bfa565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614ade57805160ff1916838001178555614b0b565b82800160010185558215614b0b579182015b82811115614b0b578251825591602001919060010190614af0565b50614a99929150614c19565b604051806040016040528060008152602001600081525090565b6040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806101c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b5b80821115614a995780546001600160a01b0319168155600101614bfb565b5b80821115614a995760008155600101614c1a565b80356001600160a01b0381168114611d9557600080fd5b60008083601f840112614c56578182fd5b5081356001600160401b03811115614c6c578182fd5b6020830191508360208083028501011115614c8657600080fd5b9250929050565b600082601f830112614c9d578081fd5b81356001600160401b0380821115614cb3578283fd5b604051601f8301601f191681016020018281118282101715614cd3578485fd5b604052828152925082848301602001861015614cee57600080fd5b8260208601602083013760006020848301015250505092915050565b600060208284031215614d1b578081fd5b611d928383614c2e565b60008060408385031215614d37578081fd5b614d418484614c2e565b9150614d508460208501614c2e565b90509250929050565b600080600080600080600060e0888a031215614d73578283fd5b87356001600160a01b0381168114614d89578384fd5b9650614d988960208a01614c2e565b9550604088013594506060880135935060808801356001600160401b0380821115614dc1578485fd5b614dcd8b838c01614c8d565b945060a08a0135915080821115614de2578384fd5b614dee8b838c01614c8d565b935060c08a0135915080821115614e03578283fd5b50614e108a828b01614c8d565b91505092959891949750929550565b60008060408385031215614e31578182fd5b614e3b8484614c2e565b91506020830135614e4b81615f59565b809150509250929050565b60008060008060808587031215614e6b578384fd5b614e758686614c2e565b935060208501356001600160401b0380821115614e90578485fd5b614e9c88838901614c8d565b94506040870135915080821115614eb1578384fd5b614ebd88838901614c8d565b93506060870135915080821115614ed2578283fd5b50614edf87828801614c8d565b91505092959194509250565b60008060408385031215614efd578182fd5b614f078484614c2e565b946020939093013593505050565b60008060208385031215614f27578182fd5b82356001600160401b03811115614f3c578283fd5b614f4885828601614c45565b90969095509350505050565b6000806000806000806000806000806000806101208d8f031215614f76578485fd5b6001600160401b038d351115614f8a578485fd5b614f978e8e358f01614c45565b909c509a506001600160401b0360208e01351115614fb3578485fd5b614fc38e60208f01358f01614c45565b909a5098506001600160401b0360408e01351115614fdf578485fd5b614fef8e60408f01358f01614c45565b90985096506150018e60608f01614c2e565b95506150108e60808f01614c2e565b945061501f8e60a08f01614c2e565b935061502e8e60c08f01614c2e565b925061503d8e60e08f01614c2e565b91506101008d013590509295989b509295989b509295989b565b600060208284031215615068578081fd5b8151611d9281615f59565b600060208284031215615084578081fd5b5035919050565b60006020828403121561509c578081fd5b5051919050565b600080604083850312156150b5578182fd5b82359150614d508460208501614c2e565b600080604083850312156150d8578182fd5b82359150602083013560028110614e4b578182fd5b6001600160a01b03169052565b60008151808452815b8181101561511f57602081850181015186830182015201615103565b818111156151305782602083870101525b50601f01601f19169290920160200192915050565b6000808354600180821660008114615164576001811461517b576151aa565b60ff198316865260028304607f16860193506151aa565b600283048786526020808720875b838110156151a25781548a820152908501908201615189565b505050860193505b509195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156152235783516001600160a01b0316835292840192918401916001016151fe565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b828110156152ab5781516152618582516150ed565b80870151858801528581015186860152606080820151908601526080808201519086015260a0808201519086015260c0908101519085015260e0909301929085019060010161524c565b5091979650505050505050565b901515815260200190565b6000606082526152d660608301866150fa565b82810360208401526152e881866150fa565b905082810360408401526152fc81856150fa565b9695505050505050565b60208082526028908201527f56616c696461746f72733a206e6f20656e6f7567682062616c6c6f747320746f604082015267103932bb37b5b29760c11b606082015260800190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252600c908201526b1b9bc81cdd58da081c1bdbdb60a21b604082015260600190565b6020808252600d908201526c36bab9ba1031329030b236b4b760991b604082015260600190565b60208082526019908201527839b437bab6321031329032ba3432b91036bab63a34b836329760391b604082015260600190565b6020808252603a908201527f56616c696461746f72733a206f6e6c79206d616e61676572206f662074686520604082015279706f6f6c2063616e20636c61696d20666565207265776172647360301b606082015260800190565b60208082526010908201526f426c6f636b2065706f6368206f6e6c7960801b604082015260600190565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b60208082526034908201527f56616c696461746f72733a20766f746573206d75737420626520696e74656765604082015273391036bab63a34b836329037b310189025a1a99760611b606082015260800190565b60208082526024908201527f6e6f20656e6f756768206b637320696e2076616c696461746f727320636f6e746040820152631c9858dd60e21b606082015260800190565b6020808252601b908201527a2b30b634b230ba37b9399d1034b73b30b634b21030b6b7bab73a1760291b604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526024908201527f6f7065726174696f6e206973206f6e6c7920616c6c6f776564206279206d616e60408201526330b3b2b960e11b606082015260800190565b6020808252603a908201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726040820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b606082015260800190565b60208082526031908201527f63616e6e6f742062652063616c6c6564206d6f7265207468616e206f6e636520604082015270696e20612073696e676c6520626c6f636b60781b606082015260800190565b602080825260139082015272141bdbdb08191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b6020808252601d908201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604082015260600190565b6020808252601a9082015279536166654d6174683a206469766973696f6e206279207a65726f60301b604082015260600190565b6020808252602d908201527f746865207265766f6b696e6720616d6f756e74206d757374206265206772656160408201526c746572207468616e207a65726f60981b606082015260800190565b6020808252601790820152766465736372697074696f6e20697320746f6f206c6f6e6760481b604082015260600190565b602080825260409082018190527f706f6f6c20646f6573206e6f74206578697374206f72206d73672e73656e6465908201527f72206973206e6f7420746865206d616e61676572206f662074686520706f6f6c606082015260800190565b60208082526011908201527031b0b73a1030b232103b30b63230ba37b960791b604082015260600190565b6020808252602f908201527f56616c696461746f72733a206f6e652074696d65206f66206368616e6765207760408201526e34ba3434b710191a103437bab9399760891b606082015260800190565b602080825260189082015277536166654d6174683a206d6f64756c6f206279207a65726f60401b604082015260600190565b60208082526038908201527f56616c696461746f72733a20746f74616c417661696c61626c65206973206c656040820152771cdcc81d1a185b881d1bdd185b111a5cdd1c9a589d5d195960421b606082015260800190565b602080825260129082015271034b73b30b634b2103b30b634b230ba37b9160751b604082015260600190565b602080825260119082015270656d61696c20697320746f6f206c6f6e6760781b604082015260600190565b6020808252601e908201527f696e76616c6964206c656e677468206f66206e65775365742061727261790000604082015260600190565b6020808252601690820152751c1c9bdc1bdcd85b081a5cc81b9bdd081c185cdcd95960521b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252603b908201527f56616c696461746f72733a2074686520666565207368617265732073686f756c60408201527a321031329034b7103a3432903930b733b29418171719981818149760291b606082015260800190565b6020808252600a90820152694d696e6572206f6e6c7960b01b604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526027908201527f56616c696461746f72733a206e6f2070656e64696e672072657761726420746f6040820152661031b630b4b69760c91b606082015260800190565b60208082526027908201527f6f6e6c792074686520706f6f6c206d616e616765722063616e20636c61696d206040820152667265776172647360c81b606082015260800190565b6020808252601990820152782b30b634b230ba37b9399d102d22a927afa0a2222922a9a99760391b604082015260600190565b6020808252601f908201527f56616c696461746f72733a204e6f206368616e67652064657465637465642e00604082015260600190565b6020808252601390820152721c1bdbdb081a5cc81b9bdd08195b98589b1959606a1b604082015260600190565b6020808252601f908201527f56616c696461746f72733a206e6f206368616e67652064657465637465642e00604082015260600190565b6020808252601a90820152791bdb9b1e481b585b9859d95c8818d85b8818da185b99d9481a5d60321b604082015260600190565b60208082526014908201527350756e69736820636f6e7472616374206f6e6c7960601b604082015260600190565b60208082526027908201527f56616c696461746f72733a206d7573742072657175697265206d696e53656c6660408201526642616c6c6f747360c81b606082015260800190565b6020808252601390820152727765627369746520697320746f6f206c6f6e6760681b604082015260600190565b6020808252601990820152781c1c9bdc1bdcd85b0818d85b9b9bdd081899481c995d5cd959603a1b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602b908201527f56616c696461746f72733a206e6f2070656e64696e672066656520726577617260408201526a32103a379031b630b4b69760a91b606082015260800190565b60208082526030908201527f56616c696461746f72733a2072656465656d20616d6f756e74206d757374206260408201526f0652067726561746572207468616e20360841b606082015260800190565b6020808252601c908201527b185b1c9958591e481a185d9948185b88195b98589b1959081c1bdbdb60221b604082015260600190565b60208082526038908201527f76616c696461746f722063616e206f6e6c7920766f746520746f2068696d7365604082015277363310313c903232b837b9b4ba34b7339036b0b933b4b71760411b606082015260800190565b602080825260409082018190527f56616c696461746f72733a206e6f2062616c6c6f747320746f20776974686472908201527f6177206f722062616c6c6f747320617265207374696c6c206c6f636b696e672e606082015260800190565b61ffff91909116815260200190565b90815260200190565b9182521515602082015260400190565b918252602082015260400190565b8015158114613ff357600080fdfe01afec26da4639ca59757acff9f9c2774466c95095a1d87e4aec0379871997eb7e77f685b38c861064cb08f2776eb5dfd3c82f652ed9f21221b8c53b75628e51a282a314ffba449688a7c5eb4426bd8e1781944ce824ce34dfaea4691d08f146a2646970667358221220c843fd1c7558d50c6e80c2710731805a08dac458f0534b114be788b0a1c7359064736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106102f85760003560e01c80630c65f52c1461033d5780630f208beb1461035257806314f64c781461038957806318e018dc146103b6578063205f5180146103e357806323382609146103f85780632687e03a146104185780632e011c1e1461043857806333ad1e01146104675780633619e9c3146104875780633c3000ba146104a757806340550a1c146104bc57806346f75138146104e9578063496188e2146104fe5780634a9b826a1461051357806351cff8d9146105335780635463080f1461055357806356713343146105735780635785a619146105935780635b16ebb7146105b35780635b337c2c146105d35780635bcee382146105f357806360b1d7281461061357806360c80cbf1461062857806361167fe71461063d57806369ee53fa1461065d5780636dd7d8ea1461067d578063714897df1461069057806379c72850146106b25780637c01f053146106c5578063862fab42146106e5578063863a20b7146107055780638f2839701461071a578063967945c71461073a5780639ced7e761461075a5780639d771a041461077a5780639de702581461079a5780639e83513d146107bc578063a0dc2758146107d1578063a2340d37146107e6578063a4bfe25914610806578063a8bc58f214610826578063afeea1151461083b578063b21dfed214610850578063b7c1313514610870578063badca81914610890578063bbb9e4d1146108b0578063beb2291a146108c5578063c2657c4d146108f2578063c3d117bf14610912578063c457865814610932578063c46102cc14610952578063c531869d14610972578063c6a84c0314610987578063c76f8d40146109a7578063ce3d1daf146109c7578063d0840298146109e7578063d279c19114610a07578063d6c0edad14610a27578063dbff2dfd14610a2f578063e5a99f4f14610a44578063edf4a3c314610a59578063ee16442e14610a6e578063f1143a4614610a8e578063f165629614610aae578063f851a44014610ace578063fd2d4b6a14610ae357610338565b36610338577f23d6854f607f94ebfa6016da2a230f6517948e27c51aa087451196d47ddf6928333460405161032e9291906151c9565b60405180910390a1005b600080fd5b61035061034b366004614d0a565b610b03565b005b34801561035e57600080fd5b5061037261036d366004614d25565b610cc6565b604051610380929190615f4b565b60405180910390f35b34801561039557600080fd5b506103a96103a4366004615073565b610cea565b60405161038091906151b5565b3480156103c257600080fd5b506103d66103d1366004614d0a565b610d11565b6040516103809190615f32565b3480156103ef57600080fd5b506103d6610d33565b34801561040457600080fd5b506103a9610413366004614d0a565b610d39565b34801561042457600080fd5b506103d6610433366004614d0a565b610d5a565b34801561044457600080fd5b50610458610453366004614d0a565b610d78565b604051610380939291906152c3565b34801561047357600080fd5b50610350610482366004614e1f565b610f49565b34801561049357600080fd5b506103d66104a2366004614d0a565b610f5f565b3480156104b357600080fd5b506103d6610f7d565b3480156104c857600080fd5b506104dc6104d7366004614d0a565b610f83565b60405161038091906152b8565b3480156104f557600080fd5b506103a9610fde565b34801561050a57600080fd5b506103d6610fed565b34801561051f57600080fd5b506104dc61052e3660046150c6565b610ff3565b34801561053f57600080fd5b5061035061054e366004614d0a565b611013565b34801561055f57600080fd5b5061035061056e366004615073565b611097565b34801561057f57600080fd5b506104dc61058e366004614d0a565b611101565b34801561059f57600080fd5b506104dc6105ae366004615073565b611122565b3480156105bf57600080fd5b506104dc6105ce366004614d0a565b611137565b3480156105df57600080fd5b506103506105ee366004615073565b611157565b3480156105ff57600080fd5b5061035061060e366004614f15565b6111b6565b34801561061f57600080fd5b506103d661124b565b34801561063457600080fd5b506103a9611251565b34801561064957600080fd5b506103d6610658366004614d0a565b611260565b34801561066957600080fd5b506103d6610678366004614d0a565b61127e565b61035061068b366004614d0a565b61129c565b34801561069c57600080fd5b506106a56113b4565b6040516103809190615f23565b6103506106c0366004614d59565b6113b9565b3480156106d157600080fd5b506103506106e0366004614e1f565b611a41565b3480156106f157600080fd5b50610350610700366004614e56565b611bef565b34801561071157600080fd5b506103a9611d2f565b34801561072657600080fd5b50610350610735366004614d0a565b611d3e565b34801561074657600080fd5b506103d6610755366004614d0a565b611d68565b34801561076657600080fd5b506103d6610775366004614d25565b611d86565b34801561078657600080fd5b50610350610795366004614d0a565b611d9b565b3480156107a657600080fd5b506107af611e37565b60405161038091906151e2565b3480156107c857600080fd5b506103d6611e9a565b3480156107dd57600080fd5b506103d6611ea0565b3480156107f257600080fd5b506103d6610801366004614d0a565b611ea6565b34801561081257600080fd5b506103506108213660046150a3565b611ec4565b34801561083257600080fd5b506103d661201a565b34801561084757600080fd5b506107af612020565b34801561085c57600080fd5b506107af61086b366004614d0a565b612130565b34801561087c57600080fd5b5061035061088b366004614f54565b6121fb565b34801561089c57600080fd5b506104dc6108ab366004614d25565b612632565b3480156108bc57600080fd5b506103d6612699565b3480156108d157600080fd5b506108e56108e0366004614d0a565b61269f565b604051610380919061522f565b3480156108fe57600080fd5b506103d661090d366004614d0a565b612922565b34801561091e57600080fd5b5061035061092d366004615073565b612940565b34801561093e57600080fd5b5061035061094d366004614eeb565b61299f565b34801561095e57600080fd5b5061035061096d366004614d0a565b612b5f565b34801561097e57600080fd5b506103d6612bf3565b34801561099357600080fd5b506103506109a2366004614d0a565b612bff565b3480156109b357600080fd5b506103726109c2366004614d25565b612d26565b3480156109d357600080fd5b506103d66109e2366004614d0a565b612d4a565b3480156109f357600080fd5b506103d6610a02366004614d0a565b612d68565b348015610a1357600080fd5b50610350610a22366004614d0a565b612d86565b610350612da4565b348015610a3b57600080fd5b506103d661312c565b348015610a5057600080fd5b506103a9613132565b348015610a6557600080fd5b506103d6613141565b348015610a7a57600080fd5b50610350610a89366004614eeb565b613147565b348015610a9a57600080fd5b50610350610aa9366004615073565b613190565b348015610aba57600080fd5b506103d6610ac9366004614d0a565b6131ef565b348015610ada57600080fd5b506103a961320d565b348015610aef57600080fd5b50610350610afe366004615073565b61321c565b610b0b61327b565b6038805460ff60a01b191690553415801590610b365750610b3434670de0b6b3a76400006132a6565b155b610b5b5760405162461bcd60e51b8152600401610b52906154c9565b60405180910390fd5b6000610b6f34670de0b6b3a76400006132d8565b6001600160a01b03838116600090815260776020526040902060010154919250163314610bae5760405162461bcd60e51b8152600401610b52906157d2565b6001600160a01b0382166000908152607760205260409020600281015415610bd957610bd98361330a565b6002810154610be890836133b1565b60028201819055600a820154610c0e9164e8d4a5100091610c08916133d6565b906132d8565b60038201556009810154610c2290836133b1565b6009820155606a54610c3490836133b1565b606a55606f54600282015410801590610c515750600d81015460ff165b15610c6357610c636070607785613410565b826001600160a01b0316336001600160a01b03167ff297865ac57d5e90b6602e368c1ee6df8104228d78fce8ed8923b48a9694796434604051610ca69190615f32565b60405180910390a350506038805460ff60a01b1916600160a01b17905550565b607a6020908152600092835260408084209091529082529020805460019091015482565b607e8181548110610cf757fe5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b0381166000908152607760205260409020600601545b919050565b606b5481565b6001600160a01b039081166000908152607760205260409020600101541690565b6001600160a01b031660009081526077602052604090206005015490565b60786020908152600091825260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452909291839190830182828015610e0f5780601f10610de457610100808354040283529160200191610e0f565b820191906000526020600020905b815481529060010190602001808311610df257829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ead5780601f10610e8257610100808354040283529160200191610ead565b820191906000526020600020905b815481529060010190602001808311610e9057829003601f168201915b50505060028085018054604080516020601f6000196101006001871615020190941695909504928301859004850281018501909152818152959695945090925090830182828015610f3f5780601f10610f1457610100808354040283529160200191610f3f565b820191906000526020600020905b815481529060010190602001808311610f2257829003601f168201915b5050505050905083565b610f51613776565b610f5b82826137a0565b5050565b6001600160a01b031660009081526077602052604090206007015490565b606e5481565b6000805b607e54811015610fd557826001600160a01b0316607e8281548110610fa857fe5b6000918252602090912001546001600160a01b03161415610fcd576001915050610d2e565b600101610f87565b50600092915050565b6033546001600160a01b031681565b610bb881565b607660209081526000928352604080842090915290825290205460ff1681565b61101b61327b565b6038805460ff60a01b19169055336001600160a01b03821614156110515760405162461bcd60e51b8152600401610b5290615e6d565b61105b3382612632565b6110775760405162461bcd60e51b8152600401610b5290615ec5565b6110813382613835565b506038805460ff60a01b1916600160a01b179055565b61109f613776565b606e548114156110c15760405162461bcd60e51b8152600401610b5290615bc1565b606e8190556040517fd045295f12ef4f160f8803b90edaa025c769d65531eab370dc395fc297ac5ac7906110f6908390615f32565b60405180910390a150565b6001600160a01b03166000908152607760205260409020600d015460ff1690565b60796020526000908152604090205460ff1681565b6001600160a01b0390811660009081526077602052604090205416151590565b61115f613776565b606b548114156111815760405162461bcd60e51b8152600401610b5290615bc1565b606b8190556040517fb1af0e731cd364da26a491d6c9e37100decbf030b0f444b8eb3601dfec2ade3a906110f6908390615f32565b6111be61393b565b60375443816111c957fe5b06156111e75760405162461bcd60e51b8152600401610b529061546a565b43600090815260766020908152604080832060018085529252909120805460ff19169091179055801580159061121e5750601d8111155b61123a5760405162461bcd60e51b8152600401610b529061598b565b611246607e8383614a3a565b505050565b606d5481565b6036546001600160a01b031681565b6001600160a01b031660009081526077602052604090206003015490565b6001600160a01b03166000908152607760205260409020600b015490565b6112a461327b565b6038805460ff60a01b191690556001600160a01b0381166000908152607760205260409020606f54600282015410156112ef5760405162461bcd60e51b8152600401610b5290615cbe565b336001600160a01b03831614156113185760405162461bcd60e51b8152600401610b5290615e6d565b600061132c34670de0b6b3a76400006132d8565b905060003411801561133e5750600081115b61135a5760405162461bcd60e51b8152600401610b52906154c9565b600061136e82670de0b6b3a76400006133d6565b9050600061137c348361395a565b905061138a33868587613982565b801561139a5761139a8133613b14565b50506038805460ff60a01b1916600160a01b179055505050565b601d81565b6113c161327b565b6038805460ff60a01b191690556113e034670de0b6b3a76400006132a6565b156113fd5760405162461bcd60e51b8152600401610b52906153dd565b60008581526079602052604090205460ff161561142c5760405162461bcd60e51b8152600401610b5290615d32565b60008581526079602052604090819020805460ff1916600117905560355490516377f085c560e01b81526001600160a01b03909116906377f085c590611478908a9089906004016151c9565b60206040518083038186803b15801561149057600080fd5b505afa1580156114a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c89190615057565b6114e45760405162461bcd60e51b8152600401610b52906159c2565b6038546001600160a01b03163314806115055750336001600160a01b038816145b6115215760405162461bcd60e51b8152600401610b5290615830565b6001600160a01b0387166115475760405162461bcd60e51b8152600401610b5290615b8e565b610bb88411156115695760405162461bcd60e51b8152600401610b5290615a33565b6001600160a01b0387166000908152607760205260409020600d015460ff16156115a55760405162461bcd60e51b8152600401610b5290615e37565b60006115b934670de0b6b3a76400006132d8565b6001600160a01b03808a166000818152607760205260409020549293509116141561176e576001600160a01b0388166000908152607760205260409020606f5460028201541061160c5761160c8961330a565b6001600160a01b0388166000908152607d6020526040902061162e908a613bad565b50600281015461163e90836133b1565b60028201819055600a82015461165e9164e8d4a5100091610c08916133d6565b6003820155600981015461167290836133b1565b6009820155600d81018054600160ff199091168117909155810180546001600160a01b0319166001600160a01b038a8116919091179091558916600090815260786020908152604090912085516116cb92870190614a9d565b506001600160a01b038916600090815260786020908152604090912084516116fb92600190920191860190614a9d565b506001600160a01b0389166000908152607860209081526040909120865161172b92600290920191880190614a9d565b50876001600160a01b0316896001600160a01b0316600080516020615f68833981519152886001604051611760929190615f3b565b60405180910390a3506119e3565b604051806101c00160405280896001600160a01b03168152602001886001600160a01b031681526020018281526020016000815260200186815260200160008152602001600081526020014381526020016117d4606c54426133b190919063ffffffff16565b815260200182815260200160008152602001600081526020016000815260200160011515815250607760008a6001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b015561018082015181600c01556101a082015181600d0160006101000a81548160ff021916908315150217905550905050604051806060016040528084815260200183815260200185815250607860008a6001600160a01b03166001600160a01b03168152602001908152602001600020600082015181600001908051906020019061196d929190614a9d565b5060208281015180516119869260018501920190614a9d565b50604082015180516119a2916002840191602090910190614a9d565b50905050866001600160a01b0316886001600160a01b0316600080516020615f688339815191528760006040516119da929190615f3b565b60405180910390a35b606f546001600160a01b03891660009081526077602052604090206002015410611a1457611a14607060778a613410565b606a54611a2190826133b1565b606a5550506038805460ff60a01b1916600160a01b179055505050505050565b611a49613bc2565b8015611a5a57611a5a8260006137a0565b606e546001600160a01b038316600090815260776020526040812060038101546002820154600a830154929392611aa79291611aa19164e8d4a5100091610c0891906133d6565b9061395a565b9050600083836005015410611ae5576005830154611ac5908561395a565b60058401556006830154611ad990856133b1565b60068401555082611b8f565b6000611afe84600501548661395a90919063ffffffff16565b9050611b178460050154836133b190919063ffffffff16565b9150611b34846005015485600601546133b190919063ffffffff16565b600685015560006005850155808310611b6c576003840154611b5690826133b1565b6003850155611b6582826133b1565b9150611b8d565b6003840154611b7b90846133b1565b6003850155611b8a82846133b1565b91505b505b603654611ba5906001600160a01b031682613bec565b43866001600160a01b03167f05599b2455d2edd13c543d8ec4cee26e688c66fce9029652baa0abdfcecda43583604051611bdf9190615f32565b60405180910390a3505050505050565b611bf7613776565b610bb883511115611c1a5760405162461bcd60e51b8152600401610b52906157a1565b606482511115611c3c5760405162461bcd60e51b8152600401610b5290615d05565b603281511115611c5e5760405162461bcd60e51b8152600401610b5290615960565b6001600160a01b038416600090815260786020526040902080600201604051611c879190615145565b6040518091039020848051906020012014611cb3578351611cb19060028301906020870190614a9d565b505b604051611cc1908290615145565b6040518091039020838051906020012014611cea578251611ce89082906020860190614a9d565b505b80600101604051611cfb9190615145565b6040518091039020828051906020012014611d27578151611d259060018301906020850190614a9d565b505b505b50505050565b6035546001600160a01b031681565b611d46613776565b603880546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b031660009081526077602052604090206008015490565b6000611d928383613c88565b90505b92915050565b611da361327b565b6038805460ff60a01b191690556001600160a01b038082166000818152607760205260409020805490921614611deb5760405162461bcd60e51b8152600401610b5290615390565b60018101546001600160a01b03163314611e175760405162461bcd60e51b8152600401610b5290615b47565b611e208261330a565b50506038805460ff60a01b1916600160a01b179055565b6060607e805480602002602001604051908101604052809291908181526020018280548015611e8f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611e71575b505050505090505b90565b606c5481565b60375481565b6001600160a01b031660009081526077602052604090206004015490565b6001600160a01b03818116600090815260776020526040902060018101549091163314611f035760405162461bcd60e51b8152600401610b5290615c5c565b600d81015460ff16611f275760405162461bcd60e51b8152600401610b5290615bf8565b80546001600160a01b0316611f4e5760405162461bcd60e51b8152600401610b52906156bc565b610bb8831115611f705760405162461bcd60e51b8152600401610b5290615a33565b8060080154421015611f945760405162461bcd60e51b8152600401610b529061585b565b8060040154831415611fb85760405162461bcd60e51b8152600401610b5290615c25565b60048101839055606c54611fcd9042906133b1565b60088201556040516001600160a01b038316907f3b72e0b66d7c778f32dd63a45b08880ca99a150c9d330e5c5a7065ae70030d3e9061200d908690615f32565b60405180910390a2505050565b60755481565b60606000612038601d61ffff16607060020154613dc4565b905080612055575050604080516000815260208101909152611e97565b6060816001600160401b038111801561206d57600080fd5b50604051908082528060200260200182016040528015612097578160200160208202803683370190505b5060705481519192506001600160a01b031690819083906000906120b757fe5b6001600160a01b039092166020928302919091019091015260015b83811015612127576001600160a01b039182166000908152607460205260409020548351921691829084908390811061210757fe5b6001600160a01b03909216602092830291909101909101526001016120d2565b50909250505090565b6001600160a01b0381166000908152607d6020526040812060609161215482613dda565b90506060816001600160401b038111801561216e57600080fd5b50604051908082528060200260200182016040528015612198578160200160208202803683370190505b5090506000805b838110156121f05760006121b38683613de5565b9050808484815181106121c257fe5b6001600160a01b03909216602092830291909101909101526121e58360016133b1565b92505060010161219f565b509095945050505050565b600054610100900460ff16806122145750612214613df1565b80612222575060005460ff16155b61223e5760405162461bcd60e51b8152600401610b5290615ab2565b600054610100900460ff16158015612269576000805460ff1961ff0019909116610100171660011790555b8b8814801561227757508b8a145b801561228257508b15155b61229e5760405162461bcd60e51b8152600401610b5290615934565b6203f480606b556213c680606d5562015180606c5568056bc75e2d63100000606e556000606f8190556122e590670de0b6b3a7640000906122df908f6133d6565b906133d6565b4710156123045760405162461bcd60e51b8152600401610b529061551d565b61230d87613df7565b61231a8686868686613e95565b612322613f6b565b60005b8c81101561258d5760008e8e8381811061233b57fe5b90506020020160208101906123509190614d0a565b905060008b8b8481811061236057fe5b6001600160a01b03851660009081526077602090815260409091209102929092013592508f90508e8581811061239257fe5b90506020020160208101906123a79190614d0a565b6001820180546001600160a01b03199081166001600160a01b0393841617909155825416908416178155606f546002820155600481018290556000600582018190556006820155436007820155606c546124029042906133b1565b6008820155606f5460098201556000600a8201819055600b8201819055600c8201819055600d8201805460ff191660011790556001600160a01b038416815260786020908152604080832081519283019182905291839052909161246a916002840191614a9d565b5060408051602081019182905260009081905261248b916001840191614a9d565b506040805160208101918290526000908190526124a9918391614a9d565b506124b76070607786613410565b607e54601d111561250e57607e80546001810182556000919091527f0f2ada1f2dbae48ae468fe0cdb7bcda7d0cffee8545442e682273ba01a6203a70180546001600160a01b0319166001600160a01b0386161790555b6009820154606a5461251f916133b1565b606a558f8f8681811061252e57fe5b90506020020160208101906125439190614d0a565b6001600160a01b0316846001600160a01b0316600080516020615f68833981519152856000604051612576929190615f3b565b60405180910390a350505050806001019050612325565b5060005b8c81101561261057612607607d60008e8e858181106125ac57fe5b90506020020160208101906125c19190614d0a565b6001600160a01b03166001600160a01b031681526020019081526020016000208f8f848181106125ed57fe5b90506020020160208101906126029190614d0a565b613bad565b50600101612591565b508015612623576000805461ff00191690555b50505050505050505050505050565b600061263c614b17565b506001600160a01b038084166000908152607b60209081526040808320938616835292815290829020825180840190935280548084526001909101549183019190915215801590612691575080602001514210155b949350505050565b606f5481565b6001600160a01b0381166000908152607c602052604081206060916126c382613dda565b9050806001600160401b03811180156126db57600080fd5b5060405190808252806020026020018201604052801561271557816020015b612702614b31565b8152602001906001900390816126fa5790505b5092506000805b828110156129195760006127308583613de5565b905061273a614b77565b506001600160a01b0380821660009081526077602090815260409182902082516101c0810184528154851681526001820154909416918401919091526002810154918301919091526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e083015260088101546101008301526009810154610120830152600a810154610140830152600b810154610160830152600c810154610180830152600d015460ff1615156101a0820152612802614b17565b506001600160a01b038083166000908152607a60209081526040808320938c168352928152908290208251808401909352805483526001015490820152612847614b17565b506001600160a01b03808a166000908152607b602090815260408083209387168352928152828220835180850190945280548452600101549083015261288d858c613c88565b90506040518060e0016040528085600001516001600160a01b03168152602001856101200151815260200185608001518152602001846000015181526020018281526020018360000151815260200183602001518152508a88815181106128f057fe5b60209081029190910101526129068760016133b1565b9650506001909401935061271c92505050565b50505050919050565b6001600160a01b031660009081526077602052604090206002015490565b612948613776565b606f5481141561296a5760405162461bcd60e51b8152600401610b5290615bc1565b606f8190556040517faa013f7784cb6a7e4b908ae680fb75d44d826bcec005582a91d91cc8eba9c5f8906110f6908390615f32565b6129a761327b565b6038805460ff60a01b19169055806129d15760405162461bcd60e51b8152600401610b5290615de7565b6001600160a01b03828116600090815260776020526040902060010154163314612a0d5760405162461bcd60e51b8152600401610b52906157d2565b6001600160a01b03821660009081526077602052604090206002810154821115612a495760405162461bcd60e51b8152600401610b5290615561565b612a528361330a565b612a5c8384612632565b15612a6a57612a6a33613ff6565b6009810154612a79818461395a565b6009830155606a54612a8b908461395a565b606a556002820154612a9d908461395a565b60028301819055600a830154612abd9164e8d4a5100091610c08916133d6565b6003830155606f5460028301541015612ae057612adb607085614031565b612aed565b612aed6070607786614204565b612afb848585606d54614474565b836001600160a01b0316336001600160a01b03167f25f15cdd571a1fdd95de770368cf68023dc79c8d2d4a0f35208a3b0b07bf23bc85604051612b3e9190615f32565b60405180910390a350506038805460ff60a01b1916600160a01b1790555050565b612b6761327b565b6038805460ff60a01b191690556001600160a01b038082166000818152607760205260409020805490921614612baf5760405162461bcd60e51b8152600401610b5290615390565b60018101546001600160a01b03163314612bdb5760405162461bcd60e51b8152600401610b52906155cd565b612be58283612632565b15611e2057611e2082613ff6565b670de0b6b3a764000081565b612c0761327b565b6038805460ff60a01b191690556001600160a01b038082166000818152607760205260409020805490921614612c4f5760405162461bcd60e51b8152600401610b5290615390565b60018101546001600160a01b03163314612c7b5760405162461bcd60e51b8152600401610b5290615410565b6000816005015411612c9f5760405162461bcd60e51b8152600401610b5290615d9c565b60058101805460009091556006820154612cb990826133b1565b6006830155612cc88133613b14565b81546040516001600160a01b03909116907fa847ccfc1c24e1b6493e19c018745f8e9f60288140e209713efc58517bfc0ce390612d06908490615f32565b60405180910390a250506038805460ff60a01b1916600160a01b17905550565b607b6020908152600092835260408084209091529082529020805460019091015482565b6001600160a01b03166000908152607760205260409020600a015490565b6001600160a01b031660009081526077602052604090206009015490565b612d8e61327b565b6038805460ff60a01b19169055611081816144f9565b612dac61393b565b612db461327b565b6038805460ff60a01b1916905543600090815260766020908152604080832083805290915290205460ff1615612dfc5760405162461bcd60e51b8152600401610b529061566b565b4360009081526076602090815260408083208380528252808320805460ff19166001179055603654815163cf813c1d60e01b815291516001600160a01b039091169263cf813c1d926004808201939182900301818787803b158015612e6057600080fd5b505af1158015612e74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e98919061508b565b905080612ea55750613117565b600080612ebd836075546133b190919063ffffffff16565b607e54909150600090156130e5576000805b607e5460ff82161015612f8a57600060776000607e8460ff1681548110612ef257fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020606f54600282015491925011801590612f335750600d81015460ff165b15612f8157612f7e60776000607e8560ff1681548110612f4f57fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190206009015484906133b1565b92505b50600101612ecf565b5080156130e3576000612f9d84836132d8565b905060005b607e5460ff821610156130e057600060776000607e8460ff1681548110612fc557fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020606f54600282015491925011806130055750600d81015460ff16155b1561301057506130d8565b60006130298260090154856133d690919063ffffffff16565b9050600061304a612710610c088560040154856133d690919063ffffffff16565b600584015490915061305c90826133b1565b6005840155600061306d838361395a565b905061309d6130928560090154610c0864e8d4a51000856133d690919063ffffffff16565b600a860154906133b1565b600a8501556130ac88846133b1565b436007860155600c8501549098506130c59060016133b1565b600c909401939093555050600190960195505b600101612fa2565b50505b505b808210156131055760405162461bcd60e51b8152600401610b52906158dc565b61310f828261395a565b607555505050505b6038805460ff60a01b1916600160a01b179055565b61271081565b6034546001600160a01b031681565b606a5481565b61314f61327b565b6038805460ff60a01b19169055336001600160a01b03831614156131855760405162461bcd60e51b8152600401610b5290615e6d565b611e203383836145bd565b613198613776565b606d548114156131ba5760405162461bcd60e51b8152600401610b5290615bc1565b606d8190556040517f6fff7f86bcaae80aa63d8c5380045b255699fbf83b399caec3278c8cccb82263906110f6908390615f32565b6001600160a01b03166000908152607760205260409020600c015490565b6038546001600160a01b031681565b613224613776565b606c548114156132465760405162461bcd60e51b8152600401610b5290615bc1565b606c8190556040517f836d4870c480e504f7e59c68ff0ab6582d14af4475c2a66c16a8f2a0b6c3fd9b906110f6908390615f32565b603854600160a01b900460ff166132a45760405162461bcd60e51b8152600401610b5290615d65565b565b60008082116132c75760405162461bcd60e51b8152600401610b52906158aa565b8183816132d057fe5b069392505050565b60008082116132f95760405162461bcd60e51b8152600401610b5290615720565b81838161330257fe5b049392505050565b6001600160a01b03811660009081526077602052604081209061332c8361472e565b9050801561334d57600182015461334d9082906001600160a01b0316613b14565b61337164e8d4a51000610c0884600a015485600201546133d690919063ffffffff16565b60038301556040516001600160a01b038416907fef89e1a1006e92f5c35aeca19e2099abded5e99c36b1f1dcdd7131398794c3259061200d908490615f32565b600082820183811015611d925760405162461bcd60e51b8152600401610b5290615494565b6000826133e557506000611d95565b828202828482816133f257fe5b0414611d925760405162461bcd60e51b8152600401610b52906159f2565b60028301546134555782546001600160a01b0382166001600160a01b031991821681178555600180860180549093169091179091556002840180549091019055611246565b82546001600160a01b038281169116141561346f57611246565b6001600160a01b03808216600090815260038501602052604090205416806135435760028401805460019081019091558401546001600160a01b039081166000908152602085905260408082206009908101549386168352912001541161352f57506001830180546001600160a01b038381166000818152600388016020908152604080832080549686166001600160a01b0319978816179055865490941682526004890190529190912080548316821790558254909116179055611246565b5060018301546001600160a01b0316613628565b6001600160a01b03808216600090815260208590526040808220600990810154938616835291200154116135775750611246565b6001600160a01b038083166000818152600487016020526040808220548585168352912080546001600160a01b031916918416919091179055600186015490911614156135e0576001840180546001600160a01b0319166001600160a01b038316179055613628565b6001600160a01b03808316600090815260038601602081815260408084205460048a01835281852054861685529290915290912080546001600160a01b031916919092161790555b5b6001600160a01b0381161580159061366757506001600160a01b03808216600090815260208590526040808220600990810154938616835291200154115b1561368e576001600160a01b03908116600090815260038501602052604090205416613629565b6001600160a01b0381166137025783546001600160a01b038381166000818152600488016020908152604080832080549686166001600160a01b0319978816179055895490941682526003890190528281208054851683179055818152919091208054831690558554909116178455611d29565b6001600160a01b0390811660008181526004860160209081526040808320805496861680855282852080549888166001600160a01b0319998a161790558154909616845260039098019091528082208054861685179055865485168417909655918252939020805490911690921790915550565b6038546001600160a01b031633146132a45760405162461bcd60e51b8152600401610b52906153b6565b6001600160a01b0382166000908152607760205260409020600d81015460ff161515821515146137fc57600d8101805460ff1916831515179055816137ef576137ea607084614031565b6137fc565b6137fc6070607785613410565b826001600160a01b03167f2f62a1a1d6859de456dd8107c09e738da088ceb9f87d90c2e31f91fb3e89b7278360405161200d91906152b8565b6001600160a01b038083166000908152607b60209081526040808320938516835292905220613862614b17565b506001600160a01b038083166000908152607a602090815260408083209387168352928152828220835180850190945280548452600101549083015282549083556138be6138b882670de0b6b3a76400006133d6565b33613b14565b81516138e9576001600160a01b0385166000908152607c602052604090206138e6818661481f565b50505b836001600160a01b0316856001600160a01b03167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb8360405161392c9190615f32565b60405180910390a35050505050565b3341146132a45760405162461bcd60e51b8152600401610b5290615a8e565b60008282111561397c5760405162461bcd60e51b8152600401610b5290615596565b50900390565b6001600160a01b038084166000908152607a60209081526040808320938816835292905220805415613a0c5760006139ba8587613c88565b90508015613a06576139cc8133613b14565b846001600160a01b0316866001600160a01b0316600080516020615f88833981519152836040516139fd9190615f32565b60405180910390a35b50613a46565b600b820154613a1c9060016133b1565b600b8301556001600160a01b0385166000908152607c60205260409020613a438186613bad565b50505b8054613a5290846133b1565b808255600a830154613a6f9164e8d4a5100091610c0891906133d6565b60018201556009820154613a8390846133b1565b6009830155606a54613a9590846133b1565b606a55606f54600283015410801590613ab25750600d82015460ff165b15613ad1578154613ad1906070906077906001600160a01b0316613410565b836001600160a01b0316856001600160a01b03167f66a9138482c99e9baf08860110ef332cc0c23b4a199a53593d8db0fc8f96fbfc8560405161392c9190615f32565b4780831115613b6557613b278282613bec565b816001600160a01b0316306001600160a01b0316600080516020615fa883398151915283604051613b589190615f32565b60405180910390a3611246565b613b6f8284613bec565b816001600160a01b0316306001600160a01b0316600080516020615fa883398151915285604051613ba09190615f32565b60405180910390a3505050565b6000611d92836001600160a01b038416614834565b6034546001600160a01b031633146132a45760405162461bcd60e51b8152600401610b5290615c90565b80471015613c0c5760405162461bcd60e51b8152600401610b52906156e9565b6000826001600160a01b031682604051613c2590611e97565b60006040518083038185875af1925050503d8060008114613c62576040519150601f19603f3d011682016040523d82523d6000602084013e613c67565b606091505b50509050806112465760405162461bcd60e51b8152600401610b5290615611565b6000613c92614b77565b506001600160a01b0380841660009081526077602090815260409182902082516101c0810184528154851681526001820154909416918401919091526002810154918301919091526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e083015260088101546101008301526009810154610120830152600a810154610140830152600b810154610160830152600c810154610180830152600d015460ff1615156101a0820152613d5a614b17565b506001600160a01b038085166000908152607a6020908152604080832093871683529281529082902082518084019093528054808452600190910154918301829052610140840151613dbb9291611aa19164e8d4a5100091610c08916133d6565b95945050505050565b6000818310613dd35781611d92565b5090919050565b6000611d958261487e565b6000611d928383614882565b303b1590565b600054610100900460ff1680613e105750613e10613df1565b80613e1e575060005460ff16155b613e3a5760405162461bcd60e51b8152600401610b5290615ab2565b600054610100900460ff16158015613e65576000805460ff1961ff0019909116610100171660011790555b603880546001600160a01b0319166001600160a01b0384161790558015610f5b576000805461ff00191690555050565b600054610100900460ff1680613eae5750613eae613df1565b80613ebc575060005460ff16155b613ed85760405162461bcd60e51b8152600401610b5290615ab2565b600054610100900460ff16158015613f03576000805460ff1961ff0019909116610100171660011790555b603380546001600160a01b038089166001600160a01b0319928316179092556034805488841690831617905560358054878416908316179055603680549286169290911691909117905560378290558015611d25576000805461ff0019169055505050505050565b600054610100900460ff1680613f845750613f84613df1565b80613f92575060005460ff16155b613fae5760405162461bcd60e51b8152600401610b5290615ab2565b600054610100900460ff16158015613fd9576000805460ff1961ff0019909116610100171660011790555b613fe16148c7565b8015613ff3576000805461ff00191690555b50565b6001600160a01b0381166000908152607b6020908152604080832090915281208054918155906112466138b882670de0b6b3a76400006133d6565b81546001600160a01b0382811691161480159061406857506001600160a01b03818116600090815260038401602052604090205416155b1561407257610f5b565b60018201546001600160a01b03828116911614156140be576001600160a01b0380821660009081526003840160205260409020546001840180546001600160a01b031916919092161790555b81546001600160a01b0382811691161415614101576001600160a01b03808216600090815260048401602052604090205483546001600160a01b03191691161782555b6001600160a01b03808216600090815260048401602052604090205416801561415c576001600160a01b038083166000908152600385016020526040808220548484168352912080546001600160a01b031916919092161790555b6001600160a01b0380831660009081526003850160205260409020541680156141b7576001600160a01b038084166000908152600486016020526040808220548484168352912080546001600160a01b031916919092161790555b50506001600160a01b03166000908152600382016020908152604080832080546001600160a01b031990811690915560048501909252909120805490911690556002018054600019019055565b6001600160a01b03808216600081815260048601602052604090205460018601549083169216148061423d57506001600160a01b038116155b8061426f57506001600160a01b0380831660009081526020859052604080822060099081015493851683529120015411155b1561427a5750611246565b6001600160a01b038083166000818152600387016020526040808220548585168352912080546001600160a01b031916918416919091179055855490911614156142dc5783546001600160a01b0319166001600160a01b03821617845561431e565b6001600160a01b0382811660009081526003860160209081526040808320548416835260048801909152902080546001600160a01b0319169183169190911790555b5b6001600160a01b0381161580159061435d57506001600160a01b03808316600090815260208590526040808220600990810154938516835291200154115b15614384576001600160a01b0390811660009081526004850160205260409020541661431f565b6001600160a01b0381166143fa576001840180546001600160a01b038481166000818152600389016020908152604080832080549686166001600160a01b031997881617905560048b01909152808220805486169055855490931681529190912080548316821790558254909116179055611d29565b6001600160a01b0390811660008181526003860160208181526040808420805487168552600490990180835281852080546001600160a01b0319908116998916998a179091558484528a54898752838720805491909916908216179097558252832080548616851790559290915290528354161790915550565b6001600160a01b038085166000908152607b6020908152604080832093871683529290522080546144a590846133b1565b81556144b142836133b1565b6001820181905581546040516001600160a01b0380881693908916927fd6f80c7d68e3e62bd7a51c3d37e575c1cfbc311c07487b69ef4eb570bc21cb689261392c9290615f4b565b6001600160a01b0381166000908152607a6020908152604080832033808552925282209190614529908490613c88565b90506000811161454b5760405162461bcd60e51b8152600401610b5290615b00565b6001600160a01b0383166000908152607760205260409020600a0154825461457d9164e8d4a5100091610c08916133d6565b600183015561458c8133613b14565b826001600160a01b0316336001600160a01b0316600080516020615f8883398151915283604051613ba09190615f32565b600081116145dd5760405162461bcd60e51b8152600401610b5290615754565b6001600160a01b038083166000908152607760209081526040808320607a8352818420948816845293909152902080548381101561462d5760405162461bcd60e51b8152600401610b5290615306565b60006146398688613c88565b905080156146855761464b8133613b14565b856001600160a01b0316876001600160a01b0316600080516020615f888339815191528360405161467c9190615f32565b60405180910390a35b61468f8787612632565b1561469e5761469e8787613835565b60098401546146ad908661395a565b60098501556146bc828661395a565b808455600a8501546146d99164e8d4a5100091610c0891906133d6565b6001840155606a546146eb908661395a565b606a55825461470a57600b84015461470490600161395a565b600b8501555b614718878787606b54614474565b6147256070607788614204565b50505050505050565b6000614738614b77565b506001600160a01b0380831660009081526077602090815260409182902082516101c081018452815485168152600182015490941691840191909152600281015491830182905260038101546060840181905260048201546080850152600582015460a0850152600682015460c0850152600782015460e085015260088201546101008501526009820154610120850152600a8201546101408501819052600b830154610160860152600c830154610180860152600d9092015460ff1615156101a0850152614818929091611aa19164e8d4a5100091610c0891906133d6565b9392505050565b6000611d92836001600160a01b03841661495c565b60006148408383614a22565b61487657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611d95565b506000611d95565b5490565b815460009082106148a55760405162461bcd60e51b8152600401610b529061534e565b8260000182815481106148b457fe5b9060005260206000200154905092915050565b600054610100900460ff16806148e057506148e0613df1565b806148ee575060005460ff16155b61490a5760405162461bcd60e51b8152600401610b5290615ab2565b600054610100900460ff16158015614935576000805460ff1961ff0019909116610100171660011790555b6038805460ff60a01b1916600160a01b1790558015613ff3576000805461ff001916905550565b60008181526001830160205260408120548015614a18578354600019808301919081019060009087908390811061498f57fe5b90600052602060002001549050808760000184815481106149ac57fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806149dc57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611d95565b6000915050611d95565b60009081526001919091016020526040902054151590565b828054828255906000526020600020908101928215614a8d579160200282015b82811115614a8d5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190614a5a565b50614a99929150614bfa565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614ade57805160ff1916838001178555614b0b565b82800160010185558215614b0b579182015b82811115614b0b578251825591602001919060010190614af0565b50614a99929150614c19565b604051806040016040528060008152602001600081525090565b6040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806101c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b5b80821115614a995780546001600160a01b0319168155600101614bfb565b5b80821115614a995760008155600101614c1a565b80356001600160a01b0381168114611d9557600080fd5b60008083601f840112614c56578182fd5b5081356001600160401b03811115614c6c578182fd5b6020830191508360208083028501011115614c8657600080fd5b9250929050565b600082601f830112614c9d578081fd5b81356001600160401b0380821115614cb3578283fd5b604051601f8301601f191681016020018281118282101715614cd3578485fd5b604052828152925082848301602001861015614cee57600080fd5b8260208601602083013760006020848301015250505092915050565b600060208284031215614d1b578081fd5b611d928383614c2e565b60008060408385031215614d37578081fd5b614d418484614c2e565b9150614d508460208501614c2e565b90509250929050565b600080600080600080600060e0888a031215614d73578283fd5b87356001600160a01b0381168114614d89578384fd5b9650614d988960208a01614c2e565b9550604088013594506060880135935060808801356001600160401b0380821115614dc1578485fd5b614dcd8b838c01614c8d565b945060a08a0135915080821115614de2578384fd5b614dee8b838c01614c8d565b935060c08a0135915080821115614e03578283fd5b50614e108a828b01614c8d565b91505092959891949750929550565b60008060408385031215614e31578182fd5b614e3b8484614c2e565b91506020830135614e4b81615f59565b809150509250929050565b60008060008060808587031215614e6b578384fd5b614e758686614c2e565b935060208501356001600160401b0380821115614e90578485fd5b614e9c88838901614c8d565b94506040870135915080821115614eb1578384fd5b614ebd88838901614c8d565b93506060870135915080821115614ed2578283fd5b50614edf87828801614c8d565b91505092959194509250565b60008060408385031215614efd578182fd5b614f078484614c2e565b946020939093013593505050565b60008060208385031215614f27578182fd5b82356001600160401b03811115614f3c578283fd5b614f4885828601614c45565b90969095509350505050565b6000806000806000806000806000806000806101208d8f031215614f76578485fd5b6001600160401b038d351115614f8a578485fd5b614f978e8e358f01614c45565b909c509a506001600160401b0360208e01351115614fb3578485fd5b614fc38e60208f01358f01614c45565b909a5098506001600160401b0360408e01351115614fdf578485fd5b614fef8e60408f01358f01614c45565b90985096506150018e60608f01614c2e565b95506150108e60808f01614c2e565b945061501f8e60a08f01614c2e565b935061502e8e60c08f01614c2e565b925061503d8e60e08f01614c2e565b91506101008d013590509295989b509295989b509295989b565b600060208284031215615068578081fd5b8151611d9281615f59565b600060208284031215615084578081fd5b5035919050565b60006020828403121561509c578081fd5b5051919050565b600080604083850312156150b5578182fd5b82359150614d508460208501614c2e565b600080604083850312156150d8578182fd5b82359150602083013560028110614e4b578182fd5b6001600160a01b03169052565b60008151808452815b8181101561511f57602081850181015186830182015201615103565b818111156151305782602083870101525b50601f01601f19169290920160200192915050565b6000808354600180821660008114615164576001811461517b576151aa565b60ff198316865260028304607f16860193506151aa565b600283048786526020808720875b838110156151a25781548a820152908501908201615189565b505050860193505b509195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156152235783516001600160a01b0316835292840192918401916001016151fe565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b828110156152ab5781516152618582516150ed565b80870151858801528581015186860152606080820151908601526080808201519086015260a0808201519086015260c0908101519085015260e0909301929085019060010161524c565b5091979650505050505050565b901515815260200190565b6000606082526152d660608301866150fa565b82810360208401526152e881866150fa565b905082810360408401526152fc81856150fa565b9695505050505050565b60208082526028908201527f56616c696461746f72733a206e6f20656e6f7567682062616c6c6f747320746f604082015267103932bb37b5b29760c11b606082015260800190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252600c908201526b1b9bc81cdd58da081c1bdbdb60a21b604082015260600190565b6020808252600d908201526c36bab9ba1031329030b236b4b760991b604082015260600190565b60208082526019908201527839b437bab6321031329032ba3432b91036bab63a34b836329760391b604082015260600190565b6020808252603a908201527f56616c696461746f72733a206f6e6c79206d616e61676572206f662074686520604082015279706f6f6c2063616e20636c61696d20666565207265776172647360301b606082015260800190565b60208082526010908201526f426c6f636b2065706f6368206f6e6c7960801b604082015260600190565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b60208082526034908201527f56616c696461746f72733a20766f746573206d75737420626520696e74656765604082015273391036bab63a34b836329037b310189025a1a99760611b606082015260800190565b60208082526024908201527f6e6f20656e6f756768206b637320696e2076616c696461746f727320636f6e746040820152631c9858dd60e21b606082015260800190565b6020808252601b908201527a2b30b634b230ba37b9399d1034b73b30b634b21030b6b7bab73a1760291b604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526024908201527f6f7065726174696f6e206973206f6e6c7920616c6c6f776564206279206d616e60408201526330b3b2b960e11b606082015260800190565b6020808252603a908201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726040820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b606082015260800190565b60208082526031908201527f63616e6e6f742062652063616c6c6564206d6f7265207468616e206f6e636520604082015270696e20612073696e676c6520626c6f636b60781b606082015260800190565b602080825260139082015272141bdbdb08191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b6020808252601d908201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604082015260600190565b6020808252601a9082015279536166654d6174683a206469766973696f6e206279207a65726f60301b604082015260600190565b6020808252602d908201527f746865207265766f6b696e6720616d6f756e74206d757374206265206772656160408201526c746572207468616e207a65726f60981b606082015260800190565b6020808252601790820152766465736372697074696f6e20697320746f6f206c6f6e6760481b604082015260600190565b602080825260409082018190527f706f6f6c20646f6573206e6f74206578697374206f72206d73672e73656e6465908201527f72206973206e6f7420746865206d616e61676572206f662074686520706f6f6c606082015260800190565b60208082526011908201527031b0b73a1030b232103b30b63230ba37b960791b604082015260600190565b6020808252602f908201527f56616c696461746f72733a206f6e652074696d65206f66206368616e6765207760408201526e34ba3434b710191a103437bab9399760891b606082015260800190565b602080825260189082015277536166654d6174683a206d6f64756c6f206279207a65726f60401b604082015260600190565b60208082526038908201527f56616c696461746f72733a20746f74616c417661696c61626c65206973206c656040820152771cdcc81d1a185b881d1bdd185b111a5cdd1c9a589d5d195960421b606082015260800190565b602080825260129082015271034b73b30b634b2103b30b634b230ba37b9160751b604082015260600190565b602080825260119082015270656d61696c20697320746f6f206c6f6e6760781b604082015260600190565b6020808252601e908201527f696e76616c6964206c656e677468206f66206e65775365742061727261790000604082015260600190565b6020808252601690820152751c1c9bdc1bdcd85b081a5cc81b9bdd081c185cdcd95960521b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252603b908201527f56616c696461746f72733a2074686520666565207368617265732073686f756c60408201527a321031329034b7103a3432903930b733b29418171719981818149760291b606082015260800190565b6020808252600a90820152694d696e6572206f6e6c7960b01b604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526027908201527f56616c696461746f72733a206e6f2070656e64696e672072657761726420746f6040820152661031b630b4b69760c91b606082015260800190565b60208082526027908201527f6f6e6c792074686520706f6f6c206d616e616765722063616e20636c61696d206040820152667265776172647360c81b606082015260800190565b6020808252601990820152782b30b634b230ba37b9399d102d22a927afa0a2222922a9a99760391b604082015260600190565b6020808252601f908201527f56616c696461746f72733a204e6f206368616e67652064657465637465642e00604082015260600190565b6020808252601390820152721c1bdbdb081a5cc81b9bdd08195b98589b1959606a1b604082015260600190565b6020808252601f908201527f56616c696461746f72733a206e6f206368616e67652064657465637465642e00604082015260600190565b6020808252601a90820152791bdb9b1e481b585b9859d95c8818d85b8818da185b99d9481a5d60321b604082015260600190565b60208082526014908201527350756e69736820636f6e7472616374206f6e6c7960601b604082015260600190565b60208082526027908201527f56616c696461746f72733a206d7573742072657175697265206d696e53656c6660408201526642616c6c6f747360c81b606082015260800190565b6020808252601390820152727765627369746520697320746f6f206c6f6e6760681b604082015260600190565b6020808252601990820152781c1c9bdc1bdcd85b0818d85b9b9bdd081899481c995d5cd959603a1b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602b908201527f56616c696461746f72733a206e6f2070656e64696e672066656520726577617260408201526a32103a379031b630b4b69760a91b606082015260800190565b60208082526030908201527f56616c696461746f72733a2072656465656d20616d6f756e74206d757374206260408201526f0652067726561746572207468616e20360841b606082015260800190565b6020808252601c908201527b185b1c9958591e481a185d9948185b88195b98589b1959081c1bdbdb60221b604082015260600190565b60208082526038908201527f76616c696461746f722063616e206f6e6c7920766f746520746f2068696d7365604082015277363310313c903232b837b9b4ba34b7339036b0b933b4b71760411b606082015260800190565b602080825260409082018190527f56616c696461746f72733a206e6f2062616c6c6f747320746f20776974686472908201527f6177206f722062616c6c6f747320617265207374696c6c206c6f636b696e672e606082015260800190565b61ffff91909116815260200190565b90815260200190565b9182521515602082015260400190565b918252602082015260400190565b8015158114613ff357600080fdfe01afec26da4639ca59757acff9f9c2774466c95095a1d87e4aec0379871997eb7e77f685b38c861064cb08f2776eb5dfd3c82f652ed9f21221b8c53b75628e51a282a314ffba449688a7c5eb4426bd8e1781944ce824ce34dfaea4691d08f146a2646970667358221220c843fd1c7558d50c6e80c2710731805a08dac458f0534b114be788b0a1c7359064736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5,
        "contract": "contracts/Validators.sol:Validators",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8,
        "contract": "contracts/Validators.sol:Validators",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 73,
        "contract": "contracts/Validators.sol:Validators",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2716,
        "contract": "contracts/Validators.sol:Validators",
        "label": "VALIDATOR_CONTRACT",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IValidators)6439"
      },
      {
        "astId": 2718,
        "contract": "contracts/Validators.sol:Validators",
        "label": "PUBLISH_CONTRACT",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IPunish)6322"
      },
      {
        "astId": 2720,
        "contract": "contracts/Validators.sol:Validators",
        "label": "PROPOSAL_CONTRACT",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(IProposal)6314"
      },
      {
        "astId": 2722,
        "contract": "contracts/Validators.sol:Validators",
        "label": "RESERVEPOOL_CONTRACT",
        "offset": 0,
        "slot": "54",
        "type": "t_contract(IReservePool)6330"
      },
      {
        "astId": 2724,
        "contract": "contracts/Validators.sol:Validators",
        "label": "EPOCH",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 81,
        "contract": "contracts/Validators.sol:Validators",
        "label": "admin",
        "offset": 0,
        "slot": "56",
        "type": "t_address"
      },
      {
        "astId": 2664,
        "contract": "contracts/Validators.sol:Validators",
        "label": "_notEntered",
        "offset": 20,
        "slot": "56",
        "type": "t_bool"
      },
      {
        "astId": 2711,
        "contract": "contracts/Validators.sol:Validators",
        "label": "__gap",
        "offset": 0,
        "slot": "57",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3014,
        "contract": "contracts/Validators.sol:Validators",
        "label": "totalBallot",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 3016,
        "contract": "contracts/Validators.sol:Validators",
        "label": "revokeLockingDuration",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 3018,
        "contract": "contracts/Validators.sol:Validators",
        "label": "feeSetLockingDuration",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 3020,
        "contract": "contracts/Validators.sol:Validators",
        "label": "marginLockingDuration",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 3022,
        "contract": "contracts/Validators.sol:Validators",
        "label": "maxPunishmentAmount",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 3024,
        "contract": "contracts/Validators.sol:Validators",
        "label": "minSelfBallots",
        "offset": 0,
        "slot": "111",
        "type": "t_uint256"
      },
      {
        "astId": 3026,
        "contract": "contracts/Validators.sol:Validators",
        "label": "_sortedEnabledValidators",
        "offset": 0,
        "slot": "112",
        "type": "t_struct(List)6493_storage"
      },
      {
        "astId": 3028,
        "contract": "contracts/Validators.sol:Validators",
        "label": "rewardsLeft",
        "offset": 0,
        "slot": "117",
        "type": "t_uint256"
      },
      {
        "astId": 3034,
        "contract": "contracts/Validators.sol:Validators",
        "label": "operationsDone",
        "offset": 0,
        "slot": "118",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(Operation)6396,t_bool))"
      },
      {
        "astId": 3038,
        "contract": "contracts/Validators.sol:Validators",
        "label": "poolInfos",
        "offset": 0,
        "slot": "119",
        "type": "t_mapping(t_address,t_struct(PoolInfo)6361_storage)"
      },
      {
        "astId": 3042,
        "contract": "contracts/Validators.sol:Validators",
        "label": "candidateInfos",
        "offset": 0,
        "slot": "120",
        "type": "t_mapping(t_address,t_struct(Description)6368_storage)"
      },
      {
        "astId": 3046,
        "contract": "contracts/Validators.sol:Validators",
        "label": "usedProposals",
        "offset": 0,
        "slot": "121",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 3052,
        "contract": "contracts/Validators.sol:Validators",
        "label": "userInfo",
        "offset": 0,
        "slot": "122",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)6373_storage))"
      },
      {
        "astId": 3058,
        "contract": "contracts/Validators.sol:Validators",
        "label": "revokingInfo",
        "offset": 0,
        "slot": "123",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RevokingInfo)6393_storage))"
      },
      {
        "astId": 3062,
        "contract": "contracts/Validators.sol:Validators",
        "label": "_votingRecordIndexInfo",
        "offset": 0,
        "slot": "124",
        "type": "t_mapping(t_address,t_struct(AddressSet)2153_storage)"
      },
      {
        "astId": 3066,
        "contract": "contracts/Validators.sol:Validators",
        "label": "managedValidatorInfo",
        "offset": 0,
        "slot": "125",
        "type": "t_mapping(t_address,t_struct(AddressSet)2153_storage)"
      },
      {
        "astId": 3069,
        "contract": "contracts/Validators.sol:Validators",
        "label": "activeValidators",
        "offset": 0,
        "slot": "126",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IProposal)6314": {
        "encoding": "inplace",
        "label": "contract IProposal",
        "numberOfBytes": "20"
      },
      "t_contract(IPunish)6322": {
        "encoding": "inplace",
        "label": "contract IPunish",
        "numberOfBytes": "20"
      },
      "t_contract(IReservePool)6330": {
        "encoding": "inplace",
        "label": "contract IReservePool",
        "numberOfBytes": "20"
      },
      "t_contract(IValidators)6439": {
        "encoding": "inplace",
        "label": "contract IValidators",
        "numberOfBytes": "20"
      },
      "t_enum(Operation)6396": {
        "encoding": "inplace",
        "label": "enum IValidators.Operation",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(RevokingInfo)6393_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct IValidators.RevokingInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(RevokingInfo)6393_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)6373_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct IValidators.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)6373_storage)"
      },
      "t_mapping(t_address,t_struct(AddressSet)2153_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2153_storage"
      },
      "t_mapping(t_address,t_struct(Description)6368_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IValidators.Description)",
        "numberOfBytes": "32",
        "value": "t_struct(Description)6368_storage"
      },
      "t_mapping(t_address,t_struct(PoolInfo)6361_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IValidators.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)6361_storage"
      },
      "t_mapping(t_address,t_struct(RevokingInfo)6393_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IValidators.RevokingInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RevokingInfo)6393_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo)6373_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IValidators.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)6373_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(Operation)6396,t_bool)": {
        "encoding": "mapping",
        "key": "t_enum(Operation)6396",
        "label": "mapping(enum IValidators.Operation => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(Operation)6396,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum IValidators.Operation => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(Operation)6396,t_bool)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2153_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2152,
            "contract": "contracts/Validators.sol:Validators",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1892_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Description)6368_storage": {
        "encoding": "inplace",
        "label": "struct IValidators.Description",
        "members": [
          {
            "astId": 6363,
            "contract": "contracts/Validators.sol:Validators",
            "label": "website",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 6365,
            "contract": "contracts/Validators.sol:Validators",
            "label": "email",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 6367,
            "contract": "contracts/Validators.sol:Validators",
            "label": "details",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(List)6493_storage": {
        "encoding": "inplace",
        "label": "struct SortedLinkedList.List",
        "members": [
          {
            "astId": 6480,
            "contract": "contracts/Validators.sol:Validators",
            "label": "head",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6482,
            "contract": "contracts/Validators.sol:Validators",
            "label": "tail",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6484,
            "contract": "contracts/Validators.sol:Validators",
            "label": "length",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6488,
            "contract": "contracts/Validators.sol:Validators",
            "label": "prev",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 6492,
            "contract": "contracts/Validators.sol:Validators",
            "label": "next",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_address)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(PoolInfo)6361_storage": {
        "encoding": "inplace",
        "label": "struct IValidators.PoolInfo",
        "members": [
          {
            "astId": 6334,
            "contract": "contracts/Validators.sol:Validators",
            "label": "validator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6336,
            "contract": "contracts/Validators.sol:Validators",
            "label": "manager",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6338,
            "contract": "contracts/Validators.sol:Validators",
            "label": "selfBallots",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6340,
            "contract": "contracts/Validators.sol:Validators",
            "label": "selfBallotsRewardsDebt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6342,
            "contract": "contracts/Validators.sol:Validators",
            "label": "feeShares",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6344,
            "contract": "contracts/Validators.sol:Validators",
            "label": "pendingFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6346,
            "contract": "contracts/Validators.sol:Validators",
            "label": "feeDebt",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6348,
            "contract": "contracts/Validators.sol:Validators",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 6350,
            "contract": "contracts/Validators.sol:Validators",
            "label": "feeSettLockingEndTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 6352,
            "contract": "contracts/Validators.sol:Validators",
            "label": "suppliedBallots",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 6354,
            "contract": "contracts/Validators.sol:Validators",
            "label": "accRewardPerShare",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 6356,
            "contract": "contracts/Validators.sol:Validators",
            "label": "voterNumber",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 6358,
            "contract": "contracts/Validators.sol:Validators",
            "label": "electedNumber",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 6360,
            "contract": "contracts/Validators.sol:Validators",
            "label": "enabled",
            "offset": 0,
            "slot": "13",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(RevokingInfo)6393_storage": {
        "encoding": "inplace",
        "label": "struct IValidators.RevokingInfo",
        "members": [
          {
            "astId": 6390,
            "contract": "contracts/Validators.sol:Validators",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6392,
            "contract": "contracts/Validators.sol:Validators",
            "label": "lockingEndTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1892_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1887,
            "contract": "contracts/Validators.sol:Validators",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1891,
            "contract": "contracts/Validators.sol:Validators",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)6373_storage": {
        "encoding": "inplace",
        "label": "struct IValidators.UserInfo",
        "members": [
          {
            "astId": 6370,
            "contract": "contracts/Validators.sol:Validators",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6372,
            "contract": "contracts/Validators.sol:Validators",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}