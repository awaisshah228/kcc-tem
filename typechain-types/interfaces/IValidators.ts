/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IValidatorsInterface extends utils.Interface {
  functions: {
    "distributeBlockReward()": FunctionFragment;
    "getActiveValidators()": FunctionFragment;
    "getPoolenabled(address)": FunctionFragment;
    "getTopValidators()": FunctionFragment;
    "isActiveValidator(address)": FunctionFragment;
    "punish(address,bool)": FunctionFragment;
    "updateActiveValidatorSet(address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "distributeBlockReward"
      | "getActiveValidators"
      | "getPoolenabled"
      | "getTopValidators"
      | "isActiveValidator"
      | "punish"
      | "updateActiveValidatorSet"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "distributeBlockReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolenabled",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveValidator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "punish",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateActiveValidatorSet",
    values: [PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "distributeBlockReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolenabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTopValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "punish", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateActiveValidatorSet",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IValidators extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IValidatorsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    distributeBlockReward(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActiveValidators(overrides?: CallOverrides): Promise<[string[]]>;

    getPoolenabled(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getTopValidators(overrides?: CallOverrides): Promise<[string[]]>;

    isActiveValidator(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    punish(
      validator: PromiseOrValue<string>,
      remove: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateActiveValidatorSet(
      newSet: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  distributeBlockReward(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActiveValidators(overrides?: CallOverrides): Promise<string[]>;

  getPoolenabled(
    val: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getTopValidators(overrides?: CallOverrides): Promise<string[]>;

  isActiveValidator(
    val: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  punish(
    validator: PromiseOrValue<string>,
    remove: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateActiveValidatorSet(
    newSet: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    distributeBlockReward(overrides?: CallOverrides): Promise<void>;

    getActiveValidators(overrides?: CallOverrides): Promise<string[]>;

    getPoolenabled(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getTopValidators(overrides?: CallOverrides): Promise<string[]>;

    isActiveValidator(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    punish(
      validator: PromiseOrValue<string>,
      remove: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateActiveValidatorSet(
      newSet: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    distributeBlockReward(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActiveValidators(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolenabled(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTopValidators(overrides?: CallOverrides): Promise<BigNumber>;

    isActiveValidator(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    punish(
      validator: PromiseOrValue<string>,
      remove: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateActiveValidatorSet(
      newSet: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    distributeBlockReward(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActiveValidators(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolenabled(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTopValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isActiveValidator(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    punish(
      validator: PromiseOrValue<string>,
      remove: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateActiveValidatorSet(
      newSet: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
