/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ProposalInterface extends utils.Interface {
  functions: {
    "EPOCH()": FunctionFragment;
    "MAX_VALIDATORS()": FunctionFragment;
    "PROPOSAL_CONTRACT()": FunctionFragment;
    "PUBLISH_CONTRACT()": FunctionFragment;
    "RESERVEPOOL_CONTRACT()": FunctionFragment;
    "VALIDATOR_CONTRACT()": FunctionFragment;
    "admin()": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "createProposal(address,string)": FunctionFragment;
    "getLatestProposalId(address)": FunctionFragment;
    "initialize(address,address,address,address,address,uint256)": FunctionFragment;
    "isProposalPassed(address,bytes32)": FunctionFragment;
    "latest(address)": FunctionFragment;
    "pass(bytes32)": FunctionFragment;
    "proposalEffectivePeriod()": FunctionFragment;
    "proposalLastingPeriod()": FunctionFragment;
    "proposals(bytes32)": FunctionFragment;
    "setUnpassed(address,bytes32)": FunctionFragment;
    "voteProposal(bytes32,bool)": FunctionFragment;
    "votes(address,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EPOCH"
      | "MAX_VALIDATORS"
      | "PROPOSAL_CONTRACT"
      | "PUBLISH_CONTRACT"
      | "RESERVEPOOL_CONTRACT"
      | "VALIDATOR_CONTRACT"
      | "admin"
      | "changeAdmin"
      | "createProposal"
      | "getLatestProposalId"
      | "initialize"
      | "isProposalPassed"
      | "latest"
      | "pass"
      | "proposalEffectivePeriod"
      | "proposalLastingPeriod"
      | "proposals"
      | "setUnpassed"
      | "voteProposal"
      | "votes"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "EPOCH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_VALIDATORS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROPOSAL_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PUBLISH_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RESERVEPOOL_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATOR_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestProposalId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isProposalPassed",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "latest",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pass",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalEffectivePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalLastingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnpassed",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "voteProposal",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "votes",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "EPOCH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_VALIDATORS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROPOSAL_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PUBLISH_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RESERVEPOOL_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATOR_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isProposalPassed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "latest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pass", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalEffectivePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalLastingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUnpassed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;

  events: {
    "LogCreateProposal(bytes32,address,address,uint256)": EventFragment;
    "LogPassProposal(bytes32,address,uint256)": EventFragment;
    "LogRejectProposal(bytes32,address,uint256)": EventFragment;
    "LogSetUnpassed(address,bytes32,uint256)": EventFragment;
    "LogVote(bytes32,address,bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogCreateProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPassProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRejectProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetUnpassed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogVote"): EventFragment;
}

export interface LogCreateProposalEventObject {
  id: string;
  proposer: string;
  dst: string;
  time: BigNumber;
}
export type LogCreateProposalEvent = TypedEvent<
  [string, string, string, BigNumber],
  LogCreateProposalEventObject
>;

export type LogCreateProposalEventFilter =
  TypedEventFilter<LogCreateProposalEvent>;

export interface LogPassProposalEventObject {
  id: string;
  dst: string;
  time: BigNumber;
}
export type LogPassProposalEvent = TypedEvent<
  [string, string, BigNumber],
  LogPassProposalEventObject
>;

export type LogPassProposalEventFilter = TypedEventFilter<LogPassProposalEvent>;

export interface LogRejectProposalEventObject {
  id: string;
  dst: string;
  time: BigNumber;
}
export type LogRejectProposalEvent = TypedEvent<
  [string, string, BigNumber],
  LogRejectProposalEventObject
>;

export type LogRejectProposalEventFilter =
  TypedEventFilter<LogRejectProposalEvent>;

export interface LogSetUnpassedEventObject {
  val: string;
  id: string;
  time: BigNumber;
}
export type LogSetUnpassedEvent = TypedEvent<
  [string, string, BigNumber],
  LogSetUnpassedEventObject
>;

export type LogSetUnpassedEventFilter = TypedEventFilter<LogSetUnpassedEvent>;

export interface LogVoteEventObject {
  id: string;
  voter: string;
  auth: boolean;
  time: BigNumber;
}
export type LogVoteEvent = TypedEvent<
  [string, string, boolean, BigNumber],
  LogVoteEventObject
>;

export type LogVoteEventFilter = TypedEventFilter<LogVoteEvent>;

export interface Proposal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProposalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EPOCH(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_VALIDATORS(overrides?: CallOverrides): Promise<[number]>;

    PROPOSAL_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    PUBLISH_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    RESERVEPOOL_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    VALIDATOR_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    changeAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createProposal(
      dst: PromiseOrValue<string>,
      details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getLatestProposalId(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _admin: PromiseOrValue<string>,
      _validatorsContract: PromiseOrValue<string>,
      _punishContract: PromiseOrValue<string>,
      _proposalContract: PromiseOrValue<string>,
      _reservePool: PromiseOrValue<string>,
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isProposalPassed(
      val: PromiseOrValue<string>,
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    latest(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pass(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    proposalEffectivePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposalLastingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, number, number, boolean] & {
        proposer: string;
        dst: string;
        details: string;
        createTime: BigNumber;
        agree: number;
        reject: number;
        resultExist: boolean;
      }
    >;

    setUnpassed(
      val: PromiseOrValue<string>,
      id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voteProposal(
      id: PromiseOrValue<BytesLike>,
      auth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        voter: string;
        voteTime: BigNumber;
        auth: boolean;
      }
    >;
  };

  EPOCH(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_VALIDATORS(overrides?: CallOverrides): Promise<number>;

  PROPOSAL_CONTRACT(overrides?: CallOverrides): Promise<string>;

  PUBLISH_CONTRACT(overrides?: CallOverrides): Promise<string>;

  RESERVEPOOL_CONTRACT(overrides?: CallOverrides): Promise<string>;

  VALIDATOR_CONTRACT(overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  changeAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createProposal(
    dst: PromiseOrValue<string>,
    details: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getLatestProposalId(
    val: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _admin: PromiseOrValue<string>,
    _validatorsContract: PromiseOrValue<string>,
    _punishContract: PromiseOrValue<string>,
    _proposalContract: PromiseOrValue<string>,
    _reservePool: PromiseOrValue<string>,
    _epoch: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isProposalPassed(
    val: PromiseOrValue<string>,
    id: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  latest(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  pass(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  proposalEffectivePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  proposalLastingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, number, number, boolean] & {
      proposer: string;
      dst: string;
      details: string;
      createTime: BigNumber;
      agree: number;
      reject: number;
      resultExist: boolean;
    }
  >;

  setUnpassed(
    val: PromiseOrValue<string>,
    id: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voteProposal(
    id: PromiseOrValue<BytesLike>,
    auth: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votes(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean] & {
      voter: string;
      voteTime: BigNumber;
      auth: boolean;
    }
  >;

  callStatic: {
    EPOCH(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_VALIDATORS(overrides?: CallOverrides): Promise<number>;

    PROPOSAL_CONTRACT(overrides?: CallOverrides): Promise<string>;

    PUBLISH_CONTRACT(overrides?: CallOverrides): Promise<string>;

    RESERVEPOOL_CONTRACT(overrides?: CallOverrides): Promise<string>;

    VALIDATOR_CONTRACT(overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    changeAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createProposal(
      dst: PromiseOrValue<string>,
      details: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getLatestProposalId(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _admin: PromiseOrValue<string>,
      _validatorsContract: PromiseOrValue<string>,
      _punishContract: PromiseOrValue<string>,
      _proposalContract: PromiseOrValue<string>,
      _reservePool: PromiseOrValue<string>,
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isProposalPassed(
      val: PromiseOrValue<string>,
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    latest(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    pass(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proposalEffectivePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    proposalLastingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, number, number, boolean] & {
        proposer: string;
        dst: string;
        details: string;
        createTime: BigNumber;
        agree: number;
        reject: number;
        resultExist: boolean;
      }
    >;

    setUnpassed(
      val: PromiseOrValue<string>,
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    voteProposal(
      id: PromiseOrValue<BytesLike>,
      auth: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    votes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        voter: string;
        voteTime: BigNumber;
        auth: boolean;
      }
    >;
  };

  filters: {
    "LogCreateProposal(bytes32,address,address,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      proposer?: PromiseOrValue<string> | null,
      dst?: PromiseOrValue<string> | null,
      time?: null
    ): LogCreateProposalEventFilter;
    LogCreateProposal(
      id?: PromiseOrValue<BytesLike> | null,
      proposer?: PromiseOrValue<string> | null,
      dst?: PromiseOrValue<string> | null,
      time?: null
    ): LogCreateProposalEventFilter;

    "LogPassProposal(bytes32,address,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      dst?: PromiseOrValue<string> | null,
      time?: null
    ): LogPassProposalEventFilter;
    LogPassProposal(
      id?: PromiseOrValue<BytesLike> | null,
      dst?: PromiseOrValue<string> | null,
      time?: null
    ): LogPassProposalEventFilter;

    "LogRejectProposal(bytes32,address,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      dst?: PromiseOrValue<string> | null,
      time?: null
    ): LogRejectProposalEventFilter;
    LogRejectProposal(
      id?: PromiseOrValue<BytesLike> | null,
      dst?: PromiseOrValue<string> | null,
      time?: null
    ): LogRejectProposalEventFilter;

    "LogSetUnpassed(address,bytes32,uint256)"(
      val?: PromiseOrValue<string> | null,
      id?: null,
      time?: null
    ): LogSetUnpassedEventFilter;
    LogSetUnpassed(
      val?: PromiseOrValue<string> | null,
      id?: null,
      time?: null
    ): LogSetUnpassedEventFilter;

    "LogVote(bytes32,address,bool,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      voter?: PromiseOrValue<string> | null,
      auth?: null,
      time?: null
    ): LogVoteEventFilter;
    LogVote(
      id?: PromiseOrValue<BytesLike> | null,
      voter?: PromiseOrValue<string> | null,
      auth?: null,
      time?: null
    ): LogVoteEventFilter;
  };

  estimateGas: {
    EPOCH(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_VALIDATORS(overrides?: CallOverrides): Promise<BigNumber>;

    PROPOSAL_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    PUBLISH_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    RESERVEPOOL_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    VALIDATOR_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    changeAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createProposal(
      dst: PromiseOrValue<string>,
      details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getLatestProposalId(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _admin: PromiseOrValue<string>,
      _validatorsContract: PromiseOrValue<string>,
      _punishContract: PromiseOrValue<string>,
      _proposalContract: PromiseOrValue<string>,
      _reservePool: PromiseOrValue<string>,
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isProposalPassed(
      val: PromiseOrValue<string>,
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latest(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pass(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalEffectivePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    proposalLastingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setUnpassed(
      val: PromiseOrValue<string>,
      id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voteProposal(
      id: PromiseOrValue<BytesLike>,
      auth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EPOCH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_VALIDATORS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROPOSAL_CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PUBLISH_CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RESERVEPOOL_CONTRACT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATOR_CONTRACT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createProposal(
      dst: PromiseOrValue<string>,
      details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getLatestProposalId(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _admin: PromiseOrValue<string>,
      _validatorsContract: PromiseOrValue<string>,
      _punishContract: PromiseOrValue<string>,
      _proposalContract: PromiseOrValue<string>,
      _reservePool: PromiseOrValue<string>,
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isProposalPassed(
      val: PromiseOrValue<string>,
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latest(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pass(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalEffectivePeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalLastingPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setUnpassed(
      val: PromiseOrValue<string>,
      id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voteProposal(
      id: PromiseOrValue<BytesLike>,
      auth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
