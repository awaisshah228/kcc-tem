/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  PunishMockForValidator,
  PunishMockForValidatorInterface,
} from "../../test/PunishMockForValidator";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "validator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "remove",
        type: "bool",
      },
    ],
    name: "CallPunish",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "validator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "remove",
        type: "bool",
      },
    ],
    name: "punish",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060d58061001e6000396000f3fe608060405260043610601f5760003560e01c80637c01f05314602a576025565b36602557005b600080fd5b348015603557600080fd5b50606160048036036040811015604a57600080fd5b506001600160a01b03813516906020013515156063565b005b604051811515906001600160a01b038416907f73f1a4caf233165bdd16cb19848abbcc17d2f01e655b3e2352f1610e0850b0d890600090a3505056fea2646970667358221220dbcfdf371b6862fd76b359b3c2c240f0e6566516e8249b4f37e78ce73cb038b564736f6c634300060c0033";

type PunishMockForValidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PunishMockForValidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PunishMockForValidator__factory extends ContractFactory {
  constructor(...args: PunishMockForValidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PunishMockForValidator> {
    return super.deploy(overrides || {}) as Promise<PunishMockForValidator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PunishMockForValidator {
    return super.attach(address) as PunishMockForValidator;
  }
  override connect(signer: Signer): PunishMockForValidator__factory {
    return super.connect(signer) as PunishMockForValidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PunishMockForValidatorInterface {
    return new utils.Interface(_abi) as PunishMockForValidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PunishMockForValidator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as PunishMockForValidator;
  }
}
