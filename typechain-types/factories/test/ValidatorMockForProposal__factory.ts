/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ValidatorMockForProposal,
  ValidatorMockForProposalInterface,
} from "../../test/ValidatorMockForProposal";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "activeValidators",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getActiveValidators",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "val",
        type: "address",
      },
    ],
    name: "isActiveValidator",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "val",
        type: "address",
      },
    ],
    name: "setActiveValidators",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102af806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806314f64c781461005157806340550a1c1461008a5780637f2a8fae146100c45780639de70258146100ec575b600080fd5b61006e6004803603602081101561006757600080fd5b5035610144565b604080516001600160a01b039092168252519081900360200190f35b6100b0600480360360208110156100a057600080fd5b50356001600160a01b031661016b565b604080519115158252519081900360200190f35b6100ea600480360360208110156100da57600080fd5b50356001600160a01b03166101c8565b005b6100f4610217565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610130578181015183820152602001610118565b505050509050019250505060405180910390f35b6000818154811061015157fe5b6000918252602090912001546001600160a01b0316905081565b6000805b6000548110156101bd57826001600160a01b03166000828154811061019057fe5b6000918252602090912001546001600160a01b031614156101b55760019150506101c3565b60010161016f565b50600090505b919050565b600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080548060200260200160405190810160405280929190818152602001828054801561026f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610251575b505050505090509056fea26469706673582212200604a55c6bf66d0a5c4dbc3c6b9e33a37af71d302e9bad38515931a0878a80f164736f6c634300060c0033";

type ValidatorMockForProposalConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ValidatorMockForProposalConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ValidatorMockForProposal__factory extends ContractFactory {
  constructor(...args: ValidatorMockForProposalConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ValidatorMockForProposal> {
    return super.deploy(overrides || {}) as Promise<ValidatorMockForProposal>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ValidatorMockForProposal {
    return super.attach(address) as ValidatorMockForProposal;
  }
  override connect(signer: Signer): ValidatorMockForProposal__factory {
    return super.connect(signer) as ValidatorMockForProposal__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ValidatorMockForProposalInterface {
    return new utils.Interface(_abi) as ValidatorMockForProposalInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ValidatorMockForProposal {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ValidatorMockForProposal;
  }
}
