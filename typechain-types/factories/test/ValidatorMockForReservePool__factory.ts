/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ValidatorMockForReservePool,
  ValidatorMockForReservePoolInterface,
} from "../../test/ValidatorMockForReservePool";

const _abi = [
  {
    inputs: [],
    name: "lastWithdrawAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "reservePool",
    outputs: [
      {
        internalType: "contract IReservePool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    name: "setReservePool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawBlockReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101e5806100206000396000f3fe6080604052600436106100435760003560e01c80630266f0441461004f5780634f393a0714610080578063b831461e146100b5578063cf813c1d146100dc5761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b506100646100f1565b604080516001600160a01b039092168252519081900360200190f35b34801561008c57600080fd5b506100b3600480360360208110156100a357600080fd5b50356001600160a01b0316610100565b005b3480156100c157600080fd5b506100ca610122565b60408051918252519081900360200190f35b3480156100e857600080fd5b506100ca610128565b6000546001600160a01b031681565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60015481565b60008060009054906101000a90046001600160a01b03166001600160a01b031663cf813c1d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561017957600080fd5b505af115801561018d573d6000803e3d6000fd5b505050506040513d60208110156101a357600080fd5b5051600181905590509056fea264697066735822122059fdb09f70411ed7b11e0f9af16f4f899e29bddcc34b684a9af1f913ced973cf64736f6c634300060c0033";

type ValidatorMockForReservePoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ValidatorMockForReservePoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ValidatorMockForReservePool__factory extends ContractFactory {
  constructor(...args: ValidatorMockForReservePoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ValidatorMockForReservePool> {
    return super.deploy(
      overrides || {}
    ) as Promise<ValidatorMockForReservePool>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ValidatorMockForReservePool {
    return super.attach(address) as ValidatorMockForReservePool;
  }
  override connect(signer: Signer): ValidatorMockForReservePool__factory {
    return super.connect(signer) as ValidatorMockForReservePool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ValidatorMockForReservePoolInterface {
    return new utils.Interface(_abi) as ValidatorMockForReservePoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ValidatorMockForReservePool {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ValidatorMockForReservePool;
  }
}
