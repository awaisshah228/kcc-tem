/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ProposalMockForValidators,
  ProposalMockForValidatorsInterface,
} from "../../test/ProposalMockForValidators";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "val",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "isProposalPassed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "val",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "setPassed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610178806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063296c26351461003b57806377f085c514610069575b600080fd5b6100676004803603604081101561005157600080fd5b506001600160a01b0381351690602001356100a9565b005b6100956004803603604081101561007f57600080fd5b506001600160a01b0381351690602001356100f8565b604080519115158252519081900360200190f35b604080516001600160a01b03909316602080850191909152838201929092528051808403820181526060909301815282519282019290922060009081529081905220805460ff19166001179055565b604080516001600160a01b03841660208083019190915281830184905282518083038401815260609092018352815191810191909120600090815290819052205460ff169291505056fea2646970667358221220e0723599b4df046c76764f334d368198697c8e874524fd60a02ebb3558b5a30f64736f6c634300060c0033";

type ProposalMockForValidatorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProposalMockForValidatorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProposalMockForValidators__factory extends ContractFactory {
  constructor(...args: ProposalMockForValidatorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ProposalMockForValidators> {
    return super.deploy(overrides || {}) as Promise<ProposalMockForValidators>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ProposalMockForValidators {
    return super.attach(address) as ProposalMockForValidators;
  }
  override connect(signer: Signer): ProposalMockForValidators__factory {
    return super.connect(signer) as ProposalMockForValidators__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProposalMockForValidatorsInterface {
    return new utils.Interface(_abi) as ProposalMockForValidatorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProposalMockForValidators {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ProposalMockForValidators;
  }
}
