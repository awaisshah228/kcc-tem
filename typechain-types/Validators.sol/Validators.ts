/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IValidators {
  export type VotingDataStruct = {
    validator: PromiseOrValue<string>;
    validatorBallot: PromiseOrValue<BigNumberish>;
    feeShares: PromiseOrValue<BigNumberish>;
    ballot: PromiseOrValue<BigNumberish>;
    pendingReward: PromiseOrValue<BigNumberish>;
    revokingBallot: PromiseOrValue<BigNumberish>;
    revokeLockingEndTime: PromiseOrValue<BigNumberish>;
  };

  export type VotingDataStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    validator: string;
    validatorBallot: BigNumber;
    feeShares: BigNumber;
    ballot: BigNumber;
    pendingReward: BigNumber;
    revokingBallot: BigNumber;
    revokeLockingEndTime: BigNumber;
  };
}

export interface ValidatorsInterface extends utils.Interface {
  functions: {
    "EPOCH()": FunctionFragment;
    "FEE_TOTAL_SHARES()": FunctionFragment;
    "MAX_FEE_SHARES()": FunctionFragment;
    "MAX_VALIDATORS()": FunctionFragment;
    "PROPOSAL_CONTRACT()": FunctionFragment;
    "PUBLISH_CONTRACT()": FunctionFragment;
    "RESERVEPOOL_CONTRACT()": FunctionFragment;
    "VALIDATOR_CONTRACT()": FunctionFragment;
    "VOTE_UNIT()": FunctionFragment;
    "activeValidators(uint256)": FunctionFragment;
    "addValidator(address,address,bytes32,uint256,string,string,string)": FunctionFragment;
    "admin()": FunctionFragment;
    "candidateInfos(address)": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "claimFeeReward(address)": FunctionFragment;
    "claimReward(address)": FunctionFragment;
    "claimSelfBallotsReward(address)": FunctionFragment;
    "depositMargin(address)": FunctionFragment;
    "distributeBlockReward()": FunctionFragment;
    "feeSetLockingDuration()": FunctionFragment;
    "getActiveValidators()": FunctionFragment;
    "getPoolManager(address)": FunctionFragment;
    "getPoolSelfBallots(address)": FunctionFragment;
    "getPoolSelfBallotsRewardsDebt(address)": FunctionFragment;
    "getPoolaccRewardPerShare(address)": FunctionFragment;
    "getPoolelectedNumber(address)": FunctionFragment;
    "getPoolenabled(address)": FunctionFragment;
    "getPoolfeeDebt(address)": FunctionFragment;
    "getPoolfeeSettLockingEndTime(address)": FunctionFragment;
    "getPoolfeeShares(address)": FunctionFragment;
    "getPoollastRewardBlock(address)": FunctionFragment;
    "getPoolpendingFee(address)": FunctionFragment;
    "getPoolsuppliedBallot(address)": FunctionFragment;
    "getPoolvoterNumber(address)": FunctionFragment;
    "getTopValidators()": FunctionFragment;
    "getUserVotingSummary(address)": FunctionFragment;
    "getValidatorsOfManager(address)": FunctionFragment;
    "initialize(address[],address[],uint256[],address,address,address,address,address,uint256)": FunctionFragment;
    "isActiveValidator(address)": FunctionFragment;
    "isPool(address)": FunctionFragment;
    "isWithdrawable(address,address)": FunctionFragment;
    "marginLockingDuration()": FunctionFragment;
    "maxPunishmentAmount()": FunctionFragment;
    "minSelfBallots()": FunctionFragment;
    "operationsDone(uint256,uint8)": FunctionFragment;
    "pendingReward(address,address)": FunctionFragment;
    "punish(address,bool)": FunctionFragment;
    "redeemMargin(address,uint256)": FunctionFragment;
    "revokeLockingDuration()": FunctionFragment;
    "revokeVote(address,uint256)": FunctionFragment;
    "revokingInfo(address,address)": FunctionFragment;
    "rewardsLeft()": FunctionFragment;
    "setFeeSetLockingDuration(uint256)": FunctionFragment;
    "setFeeSharesOfValidator(uint256,address)": FunctionFragment;
    "setMarginLockingDuration(uint256)": FunctionFragment;
    "setMaxPunishmentAmount(uint256)": FunctionFragment;
    "setMinSelfBallots(uint256)": FunctionFragment;
    "setPoolStatus(address,bool)": FunctionFragment;
    "setRevokeLockingDuration(uint256)": FunctionFragment;
    "totalBallot()": FunctionFragment;
    "updateActiveValidatorSet(address[])": FunctionFragment;
    "updateCandidateInfo(address,string,string,string)": FunctionFragment;
    "usedProposals(bytes32)": FunctionFragment;
    "userInfo(address,address)": FunctionFragment;
    "vote(address)": FunctionFragment;
    "withdraw(address)": FunctionFragment;
    "withdrawMargin(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EPOCH"
      | "FEE_TOTAL_SHARES"
      | "MAX_FEE_SHARES"
      | "MAX_VALIDATORS"
      | "PROPOSAL_CONTRACT"
      | "PUBLISH_CONTRACT"
      | "RESERVEPOOL_CONTRACT"
      | "VALIDATOR_CONTRACT"
      | "VOTE_UNIT"
      | "activeValidators"
      | "addValidator"
      | "admin"
      | "candidateInfos"
      | "changeAdmin"
      | "claimFeeReward"
      | "claimReward"
      | "claimSelfBallotsReward"
      | "depositMargin"
      | "distributeBlockReward"
      | "feeSetLockingDuration"
      | "getActiveValidators"
      | "getPoolManager"
      | "getPoolSelfBallots"
      | "getPoolSelfBallotsRewardsDebt"
      | "getPoolaccRewardPerShare"
      | "getPoolelectedNumber"
      | "getPoolenabled"
      | "getPoolfeeDebt"
      | "getPoolfeeSettLockingEndTime"
      | "getPoolfeeShares"
      | "getPoollastRewardBlock"
      | "getPoolpendingFee"
      | "getPoolsuppliedBallot"
      | "getPoolvoterNumber"
      | "getTopValidators"
      | "getUserVotingSummary"
      | "getValidatorsOfManager"
      | "initialize"
      | "isActiveValidator"
      | "isPool"
      | "isWithdrawable"
      | "marginLockingDuration"
      | "maxPunishmentAmount"
      | "minSelfBallots"
      | "operationsDone"
      | "pendingReward"
      | "punish"
      | "redeemMargin"
      | "revokeLockingDuration"
      | "revokeVote"
      | "revokingInfo"
      | "rewardsLeft"
      | "setFeeSetLockingDuration"
      | "setFeeSharesOfValidator"
      | "setMarginLockingDuration"
      | "setMaxPunishmentAmount"
      | "setMinSelfBallots"
      | "setPoolStatus"
      | "setRevokeLockingDuration"
      | "totalBallot"
      | "updateActiveValidatorSet"
      | "updateCandidateInfo"
      | "usedProposals"
      | "userInfo"
      | "vote"
      | "withdraw"
      | "withdrawMargin"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "EPOCH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "FEE_TOTAL_SHARES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FEE_SHARES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_VALIDATORS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROPOSAL_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PUBLISH_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RESERVEPOOL_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATOR_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VOTE_UNIT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activeValidators",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addValidator",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "candidateInfos",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFeeReward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSelfBallotsReward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositMargin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeBlockReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeSetLockingDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolSelfBallots",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolSelfBallotsRewardsDebt",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolaccRewardPerShare",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolelectedNumber",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolenabled",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolfeeDebt",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolfeeSettLockingEndTime",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolfeeShares",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoollastRewardBlock",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolpendingFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolsuppliedBallot",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolvoterNumber",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVotingSummary",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorsOfManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveValidator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWithdrawable",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "marginLockingDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPunishmentAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minSelfBallots",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operationsDone",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "punish",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemMargin",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeLockingDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeVote",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokingInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsLeft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeSetLockingDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeSharesOfValidator",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarginLockingDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPunishmentAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinSelfBallots",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRevokeLockingDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBallot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateActiveValidatorSet",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCandidateInfo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "usedProposals",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMargin",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "EPOCH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FEE_TOTAL_SHARES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FEE_SHARES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_VALIDATORS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROPOSAL_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PUBLISH_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RESERVEPOOL_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATOR_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VOTE_UNIT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activeValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "candidateInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFeeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSelfBallotsReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeBlockReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeSetLockingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolSelfBallots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolSelfBallotsRewardsDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolaccRewardPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolelectedNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolenabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolfeeDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolfeeSettLockingEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolfeeShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoollastRewardBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolpendingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolsuppliedBallot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolvoterNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTopValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVotingSummary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorsOfManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isActiveValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWithdrawable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marginLockingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPunishmentAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minSelfBallots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operationsDone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "punish", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeLockingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeSetLockingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeSharesOfValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarginLockingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPunishmentAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinSelfBallots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRevokeLockingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBallot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateActiveValidatorSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCandidateInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMargin",
    data: BytesLike
  ): Result;

  events: {
    "ClaimFeeReward(address,uint256)": EventFragment;
    "ClaimReward(address,address,uint256)": EventFragment;
    "DepositMargin(address,address,uint256)": EventFragment;
    "NewValidatorAdded(address,address,uint256,bool)": EventFragment;
    "PunishValidator(address,uint256,uint256)": EventFragment;
    "ReceiveKCS(address,uint256)": EventFragment;
    "RedeemMargin(address,address,uint256)": EventFragment;
    "Revoke(address,address,uint256,uint256)": EventFragment;
    "RewardTransfer(address,address,uint256)": EventFragment;
    "SetFeeSetLockingDuration(uint256)": EventFragment;
    "SetFeeShares(address,uint256)": EventFragment;
    "SetMarginLockingDuration(uint256)": EventFragment;
    "SetMaxPunishmentBallots(uint256)": EventFragment;
    "SetMinSelfBallots(uint256)": EventFragment;
    "SetPoolStatus(address,bool)": EventFragment;
    "SetRevokeLockingDuration(uint256)": EventFragment;
    "ValidatorClaimReward(address,uint256)": EventFragment;
    "Vote(address,address,uint256)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimFeeReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositMargin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewValidatorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PunishValidator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceiveKCS"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemMargin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoke"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeSetLockingDuration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeShares"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMarginLockingDuration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxPunishmentBallots"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinSelfBallots"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPoolStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRevokeLockingDuration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorClaimReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Vote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface ClaimFeeRewardEventObject {
  validator: string;
  amount: BigNumber;
}
export type ClaimFeeRewardEvent = TypedEvent<
  [string, BigNumber],
  ClaimFeeRewardEventObject
>;

export type ClaimFeeRewardEventFilter = TypedEventFilter<ClaimFeeRewardEvent>;

export interface ClaimRewardEventObject {
  user: string;
  validator: string;
  pendingReward: BigNumber;
}
export type ClaimRewardEvent = TypedEvent<
  [string, string, BigNumber],
  ClaimRewardEventObject
>;

export type ClaimRewardEventFilter = TypedEventFilter<ClaimRewardEvent>;

export interface DepositMarginEventObject {
  from: string;
  validator: string;
  amount: BigNumber;
}
export type DepositMarginEvent = TypedEvent<
  [string, string, BigNumber],
  DepositMarginEventObject
>;

export type DepositMarginEventFilter = TypedEventFilter<DepositMarginEvent>;

export interface NewValidatorAddedEventObject {
  _validator: string;
  _manager: string;
  _feeShares: BigNumber;
  _reused: boolean;
}
export type NewValidatorAddedEvent = TypedEvent<
  [string, string, BigNumber, boolean],
  NewValidatorAddedEventObject
>;

export type NewValidatorAddedEventFilter =
  TypedEventFilter<NewValidatorAddedEvent>;

export interface PunishValidatorEventObject {
  _validator: string;
  _blocknum: BigNumber;
  _amount: BigNumber;
}
export type PunishValidatorEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PunishValidatorEventObject
>;

export type PunishValidatorEventFilter = TypedEventFilter<PunishValidatorEvent>;

export interface ReceiveKCSEventObject {
  from: string;
  _amount: BigNumber;
}
export type ReceiveKCSEvent = TypedEvent<
  [string, BigNumber],
  ReceiveKCSEventObject
>;

export type ReceiveKCSEventFilter = TypedEventFilter<ReceiveKCSEvent>;

export interface RedeemMarginEventObject {
  from: string;
  validator: string;
  amount: BigNumber;
}
export type RedeemMarginEvent = TypedEvent<
  [string, string, BigNumber],
  RedeemMarginEventObject
>;

export type RedeemMarginEventFilter = TypedEventFilter<RedeemMarginEvent>;

export interface RevokeEventObject {
  user: string;
  validator: string;
  amount: BigNumber;
  lockingEndTime: BigNumber;
}
export type RevokeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  RevokeEventObject
>;

export type RevokeEventFilter = TypedEventFilter<RevokeEvent>;

export interface RewardTransferEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type RewardTransferEvent = TypedEvent<
  [string, string, BigNumber],
  RewardTransferEventObject
>;

export type RewardTransferEventFilter = TypedEventFilter<RewardTransferEvent>;

export interface SetFeeSetLockingDurationEventObject {
  duration: BigNumber;
}
export type SetFeeSetLockingDurationEvent = TypedEvent<
  [BigNumber],
  SetFeeSetLockingDurationEventObject
>;

export type SetFeeSetLockingDurationEventFilter =
  TypedEventFilter<SetFeeSetLockingDurationEvent>;

export interface SetFeeSharesEventObject {
  _validator: string;
  _feeShares: BigNumber;
}
export type SetFeeSharesEvent = TypedEvent<
  [string, BigNumber],
  SetFeeSharesEventObject
>;

export type SetFeeSharesEventFilter = TypedEventFilter<SetFeeSharesEvent>;

export interface SetMarginLockingDurationEventObject {
  duration: BigNumber;
}
export type SetMarginLockingDurationEvent = TypedEvent<
  [BigNumber],
  SetMarginLockingDurationEventObject
>;

export type SetMarginLockingDurationEventFilter =
  TypedEventFilter<SetMarginLockingDurationEvent>;

export interface SetMaxPunishmentBallotsEventObject {
  max: BigNumber;
}
export type SetMaxPunishmentBallotsEvent = TypedEvent<
  [BigNumber],
  SetMaxPunishmentBallotsEventObject
>;

export type SetMaxPunishmentBallotsEventFilter =
  TypedEventFilter<SetMaxPunishmentBallotsEvent>;

export interface SetMinSelfBallotsEventObject {
  min: BigNumber;
}
export type SetMinSelfBallotsEvent = TypedEvent<
  [BigNumber],
  SetMinSelfBallotsEventObject
>;

export type SetMinSelfBallotsEventFilter =
  TypedEventFilter<SetMinSelfBallotsEvent>;

export interface SetPoolStatusEventObject {
  validator: string;
  enabled: boolean;
}
export type SetPoolStatusEvent = TypedEvent<
  [string, boolean],
  SetPoolStatusEventObject
>;

export type SetPoolStatusEventFilter = TypedEventFilter<SetPoolStatusEvent>;

export interface SetRevokeLockingDurationEventObject {
  duration: BigNumber;
}
export type SetRevokeLockingDurationEvent = TypedEvent<
  [BigNumber],
  SetRevokeLockingDurationEventObject
>;

export type SetRevokeLockingDurationEventFilter =
  TypedEventFilter<SetRevokeLockingDurationEvent>;

export interface ValidatorClaimRewardEventObject {
  validator: string;
  pendingReward: BigNumber;
}
export type ValidatorClaimRewardEvent = TypedEvent<
  [string, BigNumber],
  ValidatorClaimRewardEventObject
>;

export type ValidatorClaimRewardEventFilter =
  TypedEventFilter<ValidatorClaimRewardEvent>;

export interface VoteEventObject {
  user: string;
  validator: string;
  amount: BigNumber;
}
export type VoteEvent = TypedEvent<
  [string, string, BigNumber],
  VoteEventObject
>;

export type VoteEventFilter = TypedEventFilter<VoteEvent>;

export interface WithdrawEventObject {
  user: string;
  validator: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Validators extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ValidatorsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EPOCH(overrides?: CallOverrides): Promise<[BigNumber]>;

    FEE_TOTAL_SHARES(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FEE_SHARES(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_VALIDATORS(overrides?: CallOverrides): Promise<[number]>;

    PROPOSAL_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    PUBLISH_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    RESERVEPOOL_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    VALIDATOR_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    VOTE_UNIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    activeValidators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addValidator(
      _validator: PromiseOrValue<string>,
      _manager: PromiseOrValue<string>,
      _proposalID: PromiseOrValue<BytesLike>,
      _feeShares: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    candidateInfos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        website: string;
        email: string;
        details: string;
      }
    >;

    changeAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimFeeReward(
      _val: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      _val: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimSelfBallotsReward(
      _val: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositMargin(
      _val: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeBlockReward(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeSetLockingDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getActiveValidators(overrides?: CallOverrides): Promise<[string[]]>;

    getPoolManager(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPoolSelfBallots(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolSelfBallotsRewardsDebt(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolaccRewardPerShare(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolelectedNumber(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolenabled(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getPoolfeeDebt(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolfeeSettLockingEndTime(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolfeeShares(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoollastRewardBlock(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolpendingFee(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolsuppliedBallot(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolvoterNumber(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTopValidators(overrides?: CallOverrides): Promise<[string[]]>;

    getUserVotingSummary(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IValidators.VotingDataStructOutput[]] & {
        votingDataList: IValidators.VotingDataStructOutput[];
      }
    >;

    getValidatorsOfManager(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    initialize(
      _validators: PromiseOrValue<string>[],
      _managers: PromiseOrValue<string>[],
      _feeShares: PromiseOrValue<BigNumberish>[],
      _admin: PromiseOrValue<string>,
      _validatorsContract: PromiseOrValue<string>,
      _punishContract: PromiseOrValue<string>,
      _proposalContract: PromiseOrValue<string>,
      _reservePool: PromiseOrValue<string>,
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isActiveValidator(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPool(
      _validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWithdrawable(
      _user: PromiseOrValue<string>,
      _val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    marginLockingDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxPunishmentAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minSelfBallots(overrides?: CallOverrides): Promise<[BigNumber]>;

    operationsDone(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pendingReward(
      _val: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    punish(
      validator: PromiseOrValue<string>,
      remove: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemMargin(
      _val: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeLockingDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    revokeVote(
      _val: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokingInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; lockingEndTime: BigNumber }
    >;

    rewardsLeft(overrides?: CallOverrides): Promise<[BigNumber]>;

    setFeeSetLockingDuration(
      _lockingDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeSharesOfValidator(
      _shares: PromiseOrValue<BigNumberish>,
      _val: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMarginLockingDuration(
      _lockingDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxPunishmentAmount(
      _max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinSelfBallots(
      _min: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolStatus(
      _val: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRevokeLockingDuration(
      _lockingDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalBallot(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateActiveValidatorSet(
      newSet: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateCandidateInfo(
      _validator: PromiseOrValue<string>,
      details: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usedProposals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    vote(
      _val: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _val: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawMargin(
      _val: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  EPOCH(overrides?: CallOverrides): Promise<BigNumber>;

  FEE_TOTAL_SHARES(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FEE_SHARES(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_VALIDATORS(overrides?: CallOverrides): Promise<number>;

  PROPOSAL_CONTRACT(overrides?: CallOverrides): Promise<string>;

  PUBLISH_CONTRACT(overrides?: CallOverrides): Promise<string>;

  RESERVEPOOL_CONTRACT(overrides?: CallOverrides): Promise<string>;

  VALIDATOR_CONTRACT(overrides?: CallOverrides): Promise<string>;

  VOTE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

  activeValidators(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  addValidator(
    _validator: PromiseOrValue<string>,
    _manager: PromiseOrValue<string>,
    _proposalID: PromiseOrValue<BytesLike>,
    _feeShares: PromiseOrValue<BigNumberish>,
    description: PromiseOrValue<string>,
    website: PromiseOrValue<string>,
    email: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  candidateInfos(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      website: string;
      email: string;
      details: string;
    }
  >;

  changeAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimFeeReward(
    _val: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    _val: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimSelfBallotsReward(
    _val: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositMargin(
    _val: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeBlockReward(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeSetLockingDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getActiveValidators(overrides?: CallOverrides): Promise<string[]>;

  getPoolManager(
    val: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPoolSelfBallots(
    val: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolSelfBallotsRewardsDebt(
    val: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolaccRewardPerShare(
    val: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolelectedNumber(
    val: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolenabled(
    val: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getPoolfeeDebt(
    val: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolfeeSettLockingEndTime(
    val: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolfeeShares(
    val: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoollastRewardBlock(
    val: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolpendingFee(
    val: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolsuppliedBallot(
    val: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolvoterNumber(
    val: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTopValidators(overrides?: CallOverrides): Promise<string[]>;

  getUserVotingSummary(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IValidators.VotingDataStructOutput[]>;

  getValidatorsOfManager(
    _manager: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  initialize(
    _validators: PromiseOrValue<string>[],
    _managers: PromiseOrValue<string>[],
    _feeShares: PromiseOrValue<BigNumberish>[],
    _admin: PromiseOrValue<string>,
    _validatorsContract: PromiseOrValue<string>,
    _punishContract: PromiseOrValue<string>,
    _proposalContract: PromiseOrValue<string>,
    _reservePool: PromiseOrValue<string>,
    _epoch: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isActiveValidator(
    val: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPool(
    _validator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWithdrawable(
    _user: PromiseOrValue<string>,
    _val: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  marginLockingDuration(overrides?: CallOverrides): Promise<BigNumber>;

  maxPunishmentAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minSelfBallots(overrides?: CallOverrides): Promise<BigNumber>;

  operationsDone(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pendingReward(
    _val: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  punish(
    validator: PromiseOrValue<string>,
    remove: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemMargin(
    _val: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeLockingDuration(overrides?: CallOverrides): Promise<BigNumber>;

  revokeVote(
    _val: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokingInfo(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; lockingEndTime: BigNumber }
  >;

  rewardsLeft(overrides?: CallOverrides): Promise<BigNumber>;

  setFeeSetLockingDuration(
    _lockingDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeSharesOfValidator(
    _shares: PromiseOrValue<BigNumberish>,
    _val: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMarginLockingDuration(
    _lockingDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxPunishmentAmount(
    _max: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinSelfBallots(
    _min: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolStatus(
    _val: PromiseOrValue<string>,
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRevokeLockingDuration(
    _lockingDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalBallot(overrides?: CallOverrides): Promise<BigNumber>;

  updateActiveValidatorSet(
    newSet: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateCandidateInfo(
    _validator: PromiseOrValue<string>,
    details: PromiseOrValue<string>,
    website: PromiseOrValue<string>,
    email: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usedProposals(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userInfo(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  vote(
    _val: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _val: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawMargin(
    _val: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    EPOCH(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_TOTAL_SHARES(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE_SHARES(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_VALIDATORS(overrides?: CallOverrides): Promise<number>;

    PROPOSAL_CONTRACT(overrides?: CallOverrides): Promise<string>;

    PUBLISH_CONTRACT(overrides?: CallOverrides): Promise<string>;

    RESERVEPOOL_CONTRACT(overrides?: CallOverrides): Promise<string>;

    VALIDATOR_CONTRACT(overrides?: CallOverrides): Promise<string>;

    VOTE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    activeValidators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    addValidator(
      _validator: PromiseOrValue<string>,
      _manager: PromiseOrValue<string>,
      _proposalID: PromiseOrValue<BytesLike>,
      _feeShares: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    candidateInfos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        website: string;
        email: string;
        details: string;
      }
    >;

    changeAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFeeReward(
      _val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(
      _val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimSelfBallotsReward(
      _val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositMargin(
      _val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeBlockReward(overrides?: CallOverrides): Promise<void>;

    feeSetLockingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveValidators(overrides?: CallOverrides): Promise<string[]>;

    getPoolManager(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPoolSelfBallots(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolSelfBallotsRewardsDebt(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolaccRewardPerShare(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolelectedNumber(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolenabled(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPoolfeeDebt(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolfeeSettLockingEndTime(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolfeeShares(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoollastRewardBlock(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolpendingFee(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolsuppliedBallot(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolvoterNumber(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTopValidators(overrides?: CallOverrides): Promise<string[]>;

    getUserVotingSummary(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IValidators.VotingDataStructOutput[]>;

    getValidatorsOfManager(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    initialize(
      _validators: PromiseOrValue<string>[],
      _managers: PromiseOrValue<string>[],
      _feeShares: PromiseOrValue<BigNumberish>[],
      _admin: PromiseOrValue<string>,
      _validatorsContract: PromiseOrValue<string>,
      _punishContract: PromiseOrValue<string>,
      _proposalContract: PromiseOrValue<string>,
      _reservePool: PromiseOrValue<string>,
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isActiveValidator(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPool(
      _validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWithdrawable(
      _user: PromiseOrValue<string>,
      _val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    marginLockingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    maxPunishmentAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minSelfBallots(overrides?: CallOverrides): Promise<BigNumber>;

    operationsDone(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pendingReward(
      _val: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    punish(
      validator: PromiseOrValue<string>,
      remove: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemMargin(
      _val: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeLockingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    revokeVote(
      _val: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokingInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; lockingEndTime: BigNumber }
    >;

    rewardsLeft(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeSetLockingDuration(
      _lockingDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeSharesOfValidator(
      _shares: PromiseOrValue<BigNumberish>,
      _val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarginLockingDuration(
      _lockingDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPunishmentAmount(
      _max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinSelfBallots(
      _min: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolStatus(
      _val: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRevokeLockingDuration(
      _lockingDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalBallot(overrides?: CallOverrides): Promise<BigNumber>;

    updateActiveValidatorSet(
      newSet: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateCandidateInfo(
      _validator: PromiseOrValue<string>,
      details: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usedProposals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    vote(
      _val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawMargin(
      _val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimFeeReward(address,uint256)"(
      validator?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimFeeRewardEventFilter;
    ClaimFeeReward(
      validator?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimFeeRewardEventFilter;

    "ClaimReward(address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      validator?: PromiseOrValue<string> | null,
      pendingReward?: null
    ): ClaimRewardEventFilter;
    ClaimReward(
      user?: PromiseOrValue<string> | null,
      validator?: PromiseOrValue<string> | null,
      pendingReward?: null
    ): ClaimRewardEventFilter;

    "DepositMargin(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      validator?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositMarginEventFilter;
    DepositMargin(
      from?: PromiseOrValue<string> | null,
      validator?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositMarginEventFilter;

    "NewValidatorAdded(address,address,uint256,bool)"(
      _validator?: PromiseOrValue<string> | null,
      _manager?: PromiseOrValue<string> | null,
      _feeShares?: null,
      _reused?: null
    ): NewValidatorAddedEventFilter;
    NewValidatorAdded(
      _validator?: PromiseOrValue<string> | null,
      _manager?: PromiseOrValue<string> | null,
      _feeShares?: null,
      _reused?: null
    ): NewValidatorAddedEventFilter;

    "PunishValidator(address,uint256,uint256)"(
      _validator?: PromiseOrValue<string> | null,
      _blocknum?: PromiseOrValue<BigNumberish> | null,
      _amount?: null
    ): PunishValidatorEventFilter;
    PunishValidator(
      _validator?: PromiseOrValue<string> | null,
      _blocknum?: PromiseOrValue<BigNumberish> | null,
      _amount?: null
    ): PunishValidatorEventFilter;

    "ReceiveKCS(address,uint256)"(
      from?: null,
      _amount?: null
    ): ReceiveKCSEventFilter;
    ReceiveKCS(from?: null, _amount?: null): ReceiveKCSEventFilter;

    "RedeemMargin(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      validator?: PromiseOrValue<string> | null,
      amount?: null
    ): RedeemMarginEventFilter;
    RedeemMargin(
      from?: PromiseOrValue<string> | null,
      validator?: PromiseOrValue<string> | null,
      amount?: null
    ): RedeemMarginEventFilter;

    "Revoke(address,address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      validator?: PromiseOrValue<string> | null,
      amount?: null,
      lockingEndTime?: null
    ): RevokeEventFilter;
    Revoke(
      user?: PromiseOrValue<string> | null,
      validator?: PromiseOrValue<string> | null,
      amount?: null,
      lockingEndTime?: null
    ): RevokeEventFilter;

    "RewardTransfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardTransferEventFilter;
    RewardTransfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardTransferEventFilter;

    "SetFeeSetLockingDuration(uint256)"(
      duration?: null
    ): SetFeeSetLockingDurationEventFilter;
    SetFeeSetLockingDuration(
      duration?: null
    ): SetFeeSetLockingDurationEventFilter;

    "SetFeeShares(address,uint256)"(
      _validator?: PromiseOrValue<string> | null,
      _feeShares?: null
    ): SetFeeSharesEventFilter;
    SetFeeShares(
      _validator?: PromiseOrValue<string> | null,
      _feeShares?: null
    ): SetFeeSharesEventFilter;

    "SetMarginLockingDuration(uint256)"(
      duration?: null
    ): SetMarginLockingDurationEventFilter;
    SetMarginLockingDuration(
      duration?: null
    ): SetMarginLockingDurationEventFilter;

    "SetMaxPunishmentBallots(uint256)"(
      max?: null
    ): SetMaxPunishmentBallotsEventFilter;
    SetMaxPunishmentBallots(max?: null): SetMaxPunishmentBallotsEventFilter;

    "SetMinSelfBallots(uint256)"(min?: null): SetMinSelfBallotsEventFilter;
    SetMinSelfBallots(min?: null): SetMinSelfBallotsEventFilter;

    "SetPoolStatus(address,bool)"(
      validator?: PromiseOrValue<string> | null,
      enabled?: null
    ): SetPoolStatusEventFilter;
    SetPoolStatus(
      validator?: PromiseOrValue<string> | null,
      enabled?: null
    ): SetPoolStatusEventFilter;

    "SetRevokeLockingDuration(uint256)"(
      duration?: null
    ): SetRevokeLockingDurationEventFilter;
    SetRevokeLockingDuration(
      duration?: null
    ): SetRevokeLockingDurationEventFilter;

    "ValidatorClaimReward(address,uint256)"(
      validator?: PromiseOrValue<string> | null,
      pendingReward?: null
    ): ValidatorClaimRewardEventFilter;
    ValidatorClaimReward(
      validator?: PromiseOrValue<string> | null,
      pendingReward?: null
    ): ValidatorClaimRewardEventFilter;

    "Vote(address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      validator?: PromiseOrValue<string> | null,
      amount?: null
    ): VoteEventFilter;
    Vote(
      user?: PromiseOrValue<string> | null,
      validator?: PromiseOrValue<string> | null,
      amount?: null
    ): VoteEventFilter;

    "Withdraw(address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      validator?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      validator?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    EPOCH(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_TOTAL_SHARES(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE_SHARES(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_VALIDATORS(overrides?: CallOverrides): Promise<BigNumber>;

    PROPOSAL_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    PUBLISH_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    RESERVEPOOL_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    VALIDATOR_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    activeValidators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addValidator(
      _validator: PromiseOrValue<string>,
      _manager: PromiseOrValue<string>,
      _proposalID: PromiseOrValue<BytesLike>,
      _feeShares: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    candidateInfos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimFeeReward(
      _val: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimReward(
      _val: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimSelfBallotsReward(
      _val: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositMargin(
      _val: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeBlockReward(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeSetLockingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveValidators(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolManager(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolSelfBallots(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolSelfBallotsRewardsDebt(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolaccRewardPerShare(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolelectedNumber(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolenabled(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolfeeDebt(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolfeeSettLockingEndTime(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolfeeShares(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoollastRewardBlock(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolpendingFee(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolsuppliedBallot(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolvoterNumber(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTopValidators(overrides?: CallOverrides): Promise<BigNumber>;

    getUserVotingSummary(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorsOfManager(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _validators: PromiseOrValue<string>[],
      _managers: PromiseOrValue<string>[],
      _feeShares: PromiseOrValue<BigNumberish>[],
      _admin: PromiseOrValue<string>,
      _validatorsContract: PromiseOrValue<string>,
      _punishContract: PromiseOrValue<string>,
      _proposalContract: PromiseOrValue<string>,
      _reservePool: PromiseOrValue<string>,
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isActiveValidator(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPool(
      _validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWithdrawable(
      _user: PromiseOrValue<string>,
      _val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marginLockingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    maxPunishmentAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minSelfBallots(overrides?: CallOverrides): Promise<BigNumber>;

    operationsDone(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingReward(
      _val: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    punish(
      validator: PromiseOrValue<string>,
      remove: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemMargin(
      _val: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeLockingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    revokeVote(
      _val: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokingInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsLeft(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeSetLockingDuration(
      _lockingDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeSharesOfValidator(
      _shares: PromiseOrValue<BigNumberish>,
      _val: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMarginLockingDuration(
      _lockingDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxPunishmentAmount(
      _max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinSelfBallots(
      _min: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolStatus(
      _val: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRevokeLockingDuration(
      _lockingDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalBallot(overrides?: CallOverrides): Promise<BigNumber>;

    updateActiveValidatorSet(
      newSet: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateCandidateInfo(
      _validator: PromiseOrValue<string>,
      details: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usedProposals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      _val: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _val: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawMargin(
      _val: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EPOCH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEE_TOTAL_SHARES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FEE_SHARES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_VALIDATORS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROPOSAL_CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PUBLISH_CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RESERVEPOOL_CONTRACT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALIDATOR_CONTRACT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VOTE_UNIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeValidators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addValidator(
      _validator: PromiseOrValue<string>,
      _manager: PromiseOrValue<string>,
      _proposalID: PromiseOrValue<BytesLike>,
      _feeShares: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    candidateInfos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimFeeReward(
      _val: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      _val: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimSelfBallotsReward(
      _val: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositMargin(
      _val: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeBlockReward(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeSetLockingDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveValidators(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolManager(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolSelfBallots(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolSelfBallotsRewardsDebt(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolaccRewardPerShare(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolelectedNumber(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolenabled(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolfeeDebt(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolfeeSettLockingEndTime(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolfeeShares(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoollastRewardBlock(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolpendingFee(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolsuppliedBallot(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolvoterNumber(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTopValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserVotingSummary(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorsOfManager(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _validators: PromiseOrValue<string>[],
      _managers: PromiseOrValue<string>[],
      _feeShares: PromiseOrValue<BigNumberish>[],
      _admin: PromiseOrValue<string>,
      _validatorsContract: PromiseOrValue<string>,
      _punishContract: PromiseOrValue<string>,
      _proposalContract: PromiseOrValue<string>,
      _reservePool: PromiseOrValue<string>,
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isActiveValidator(
      val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPool(
      _validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWithdrawable(
      _user: PromiseOrValue<string>,
      _val: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marginLockingDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPunishmentAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minSelfBallots(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operationsDone(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingReward(
      _val: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    punish(
      validator: PromiseOrValue<string>,
      remove: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemMargin(
      _val: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeLockingDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeVote(
      _val: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokingInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsLeft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFeeSetLockingDuration(
      _lockingDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeSharesOfValidator(
      _shares: PromiseOrValue<BigNumberish>,
      _val: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMarginLockingDuration(
      _lockingDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPunishmentAmount(
      _max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinSelfBallots(
      _min: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolStatus(
      _val: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRevokeLockingDuration(
      _lockingDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalBallot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateActiveValidatorSet(
      newSet: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateCandidateInfo(
      _validator: PromiseOrValue<string>,
      details: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usedProposals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      _val: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _val: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawMargin(
      _val: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
